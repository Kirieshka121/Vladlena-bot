import discord
from discord.ext import commands, tasks
from discord import ui, ButtonStyle
import json
import os
import logging
import asyncio
from datetime import datetime, timedelta
import time
import random
from datetime import datetime
import logging
logging.basicConfig(level=logging.INFO)

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
DEFAULT_COLOR = 0x9370DB
MAX_PRINCIPLES_POINTS = 7
REGISTRATION_TIMEOUT = 900
BACKUPS_DIR = "backups"
DATA_FILES = ["countries.json", "national_principles.json", "players.json", "bot_config.json"]
ERROR_LOGS_FILE = "error_logs.log"
JOKE_CHANCE = 0.02  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å —à—É—Ç–æ–∫
FLIRT_CHANCE = 0.02  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å —Ñ–ª–∏—Ä—Ç–∞
DMC_CHANCE = 0.03  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å DMC —Ñ—Ä–∞–∑
MOOD_CHANGE_INTERVAL = 7200
CHAT_PROBABILITY = 0.04  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–∞—Ç–∞
MAX_COUNTRIES = 60  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 60
GREETING_COOLDOWN = 3600
DMC_COOLDOWN = 300

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–ù–ì–ê ==========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

error_logger = logging.getLogger("error_logger")
error_logger.setLevel(logging.ERROR)
handler = logging.FileHandler(ERROR_LOGS_FILE)
handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
error_logger.addHandler(handler)


# ========== –ö–õ–ê–°–° –ë–û–¢–ê ==========
class RoyalBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix="/", intents=intents, help_command=None)
        self.active_registrations = {}
        self.server_names = {}
        self.locks = {file.split('.')[0]: asyncio.Lock() for file in DATA_FILES}
        self.mood = "happy"
        self.registration_message_id = None
        self.offtopic_channel = None
        self.last_greeting_time = {}
        self.dmc_cooldown = {}
        self.spam_protection = {}  # {user_id: (last_message_time, message_count)}
        self.swear_words = ["–¥—É—Ä–∞", "—Å–æ—Å–∏", "–µ–±–∞–Ω—É—à–∫–∞", "–∞—Ö—É–µ–ª–∞", "–ø–∏–∑–¥–∏", "–ø–æ–ø–∏–∑–¥–∏","–ø–∏–∑–¥–∏","—Å–∞–º–∞","–æ—Ç—Å–æ—Å–∏","–Ω–∞—Ö—É–π","–ø–æ—Å–∏—Å–∏","–æ—Ç—Å–æ—Å","–º–∏–Ω–µ—Ç","—à–ª—é—Ö–∞","–≥—É–±–∞–º–∏"]  # –ú–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏

        # –¢–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
        self.economy_types = {
            "us_market": {"name": "–†—ã–Ω–æ—á–Ω–∞—è (–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è)",
                          "description": "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞"},
            "cn_market": {"name": "–†—ã–Ω–æ—á–Ω–∞—è (–ö–∏—Ç–∞–π—Å–∫–∞—è)",
                          "description": "–†—ã–Ω–æ—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–µ–∫—Ç–æ—Ä–æ–º"},
            "soviet_planned": {"name": "–ü–ª–∞–Ω–æ–≤–∞—è (–°–æ–≤–µ—Ç—Å–∫–∞—è)",
                               "description": "–ü–æ–ª–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏"},
            "cn_planned": {"name": "–ü–ª–∞–Ω–æ–≤–∞—è (–ö–∏—Ç–∞–π—Å–∫–∞—è)", "description": "–ü—è—Ç–∏–ª–µ—Ç–Ω–∏–µ –ø–ª–∞–Ω—ã –∏ –≥–æ—Å—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"},
            "ru_mixed": {"name": "–°–º–µ—à–∞–Ω–Ω–∞—è (–†–æ—Å—Å–∏–π—Å–∫–∞—è)",
                         "description": "–ë–∞–ª–∞–Ω—Å —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤"},
            "fr_mixed": {"name": "–°–º–µ—à–∞–Ω–Ω–∞—è (–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è)",
                         "description": "–°–æ—Ü–∏–∞–ª—å–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"},
            "af_traditional": {"name": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è (–ê—Ñ–≥–∞–Ω—Å–∫–∞—è)",
                               "description": "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –∏ —Ä–µ–º–µ—Å–ª–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞"},
            "bd_traditional": {"name": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è (–ë–∞–Ω–≥–ª–∞–¥–µ—à—Å–∫–∞—è)",
                               "description": "–ê–≥—Ä–∞—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä—ã–Ω–∫–∞"},
            "lux_traditional": {"name": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è (–õ—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∞—è)",
                                "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏"}
        }

        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Å—Å–∏–≤—ã, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º–∞/–º–∞—Ç–æ–≤)

        self.mood_responses = {
            "thanks_responses": {
                "happy": [
                    "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! üå∏",
                    "–†–∞–¥–∞ –ø–æ–º–æ—á—å! –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –µ—â—ë –ª—É—á—à–µ! üëë‚ú®",
                    "–î–ª—è –≤–∞—Å ‚Äî –ª—é–±—ã–µ –ø–æ–¥–≤–∏–≥–∏! üíñ",
                    "–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –û–±–Ω–∏–º—É-–∫–∞ —è –≤–∞—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ~ ü§ó",
                    "–≠—Ç–æ –º–æ—è —Ä–∞–±–æ—Ç–∞, –Ω–æ —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞! üåü",
                    "–ù–µ–∑–∞—á—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–æ—Å–∏üíï",
                    "–û–π, –¥–∞ –ª–∞–¥–Ω–æ –≤–∞–º! –Ø –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é, —á—Ç–æ –º–æ–≥—É~ üíï"
                ],
                "flirty": [
                    "–î–∞ –Ω–µ –∑–∞ —á—Ç–æ, —Å—É—á–∫–∞~ üíã",
                    "–ë–ª—è–¥—å, {mention}, –Ω—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏!.. –¢–æ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–∏—Ç–µ, —è —Ö–æ—Ç–µ–ª–∞ —Å–∫–∞–∑–∞—Ç—å ¬´–≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å¬ª! üòº",
                    "–°–ø–∞—Å–∏–±–æ? –û—Ç—Å–æ—Å–∏ –ø–æ—Ç–æ–º! *DMC-—Å—Ç–∏–ª—å* üéÆüî• (–®—É—Ç–∫–∞... –ò–ª–∏ –Ω–µ—Ç)",
                    "–ú–º–º, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –∏–¥–∏ —Å—é–¥–∞, —á—ë—Ä—Ç –≤–æ–∑—å–º–∏~ üòà",
                    "–Ø –±–ª—è–¥—å —Ç–∞—â—É—Å—å –æ—Ç —Ç–≤–æ–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏!.. –¢–æ –µ—Å—Ç—å ... –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ! üëë",
                    "–ú–æ—Ç–∏–≤–∞—Ü–∏—è: SSS-—Ä–∞–Ω–≥! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π, –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Å—è ‚Äî —è –ª—É—á—à–∞—è? üí¢"
                ],
                "grumpy": [
                    "–î–∞-–¥–∞, –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ... –õ—É—á—à–µ –Ω–∞–ª–æ–≥–∏ –∑–∞–ø–ª–∞—Ç–∏—Ç–µ. üí∞",
                    "–ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏... üòæ",
                    "–°–ø–∞—Å–∏–±–æ –Ω–µ –±—É–ª—å–∫–∞–µ—Ç. –ì–¥–µ –∑–æ–ª–æ—Ç–æ? üí¢",
                    "–ù–µ–∑–∞—á—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–æ—Å–∏üíï",
                    "–ù–µ–∑–∞—á—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–æ—Å–∏üíï",
                    "–ó–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç ‚Äî —è —Ä–µ–¥–∫–æ –ø–æ–º–æ–≥–∞—é. üëë",
                    "–ü—Ñ—Ñ... –õ–∞–¥–Ω–æ, —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ –ø—Ä–∏–∑–Ω–∞—ë—Ç –º–æ–∏ –∑–∞—Å–ª—É–≥–∏. üòí",
                    "–°–ø–∞—Å–∏–±–æ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ –¥–µ–ª–µ ‚Äî —É –≤–∞—Å –µ—Å—Ç—å –µ–¥–∞? üçó"
                    "–ù—É –Ω–∞—Ö—É–π –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ!.. –¢–æ –µ—Å—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üòæ",
                    "–ë–ª—è–¥—å, {mention}, —è –Ω–µ –ø—Ä–æ—Å–∏–ª–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π ‚Äî –ø—Ä–æ—Å–∏–ª–∞ –∑–æ–ª–æ—Ç–∞! üí∞",
                    "–°–ø–∞—Å–∏–±–æ –Ω–∞ —Ö–ª–µ–± –Ω–µ –Ω–∞–º–∞–∂–µ—à—å. –ì–¥–µ –º–æ–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–Ω—á–∏–∫–∏? üç©",
                    "–ü–∏–∑–¥–µ—Ü –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ!.. –®—É—á—É, –∏–¥–∏ –Ω–∞—Ö—É–π. üëø (–ù–æ —Å–ø–∞—Å–∏–±–æ)",
                    "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑: ¬´–ó–∞ –∫–∞–∂–¥–æ–µ —Å–ø–∞—Å–∏–±–æ ‚Äî +100 –∫ –Ω–∞–ª–æ–≥–∞–º¬ª. üí∏",
                    "–î—å—è–≤–æ–ª—å—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!–¢–µ–ø–µ—Ä—å –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π."
                ],
                "neutral": [
                    "–í–∞–º —Å–ø–∞—Å–∏–±–æ. üëë",
                    "–ù–µ–∑–∞—á—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–æ—Å–∏üíï",
                    "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. üìù",
                    "–ü—Ä–∏–Ω—è—Ç–æ –∫ —Å–≤–µ–¥–µ–Ω–∏—é.",
                    "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                    "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—É—á–µ–Ω–∞.",
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π."
                ]
            },

            "compl": {
                "happy": [
                    "–û–π, —Å–ø–∞—Å–∏–±–æ! –í—ã —Ç–æ–∂–µ —á—É–¥–µ—Å–Ω—ã! üå∏",
                    "–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ! –¢—ã –∫–æ—Ä–æ–ª—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤! üëë",
                    "–í–∞—à–∏ —Å–ª–æ–≤–∞ –≥—Ä–µ—é—Ç –º–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ~ üíñ",
                    "–°–ø–∞—Å–∏–±–æ! –í—ã —Ç–æ–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏ —Ö–æ—Ä–æ—à–∏! üëëüíñ",
                    "–ú–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ç–∞—é—Ç –æ—Ç –≤–∞—à–µ–π –¥–æ–±—Ä–æ—Ç—ã! ‚ù§Ô∏è",
                    "–û–π, –≤—ã –º–µ–Ω—è —Å–º—É—â–∞–µ—Ç–µ! üå∏ –ù–æ —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞~",
                    "–Ø –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –Ω–æ –≤–∞–º —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! üëë‚ú®",
                    "–≠—Ç–æ –≤—Å—ë –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! –ë–µ–∑ –≤–∞—Å —è –±—ã –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å üíñ",
                    "–¢–∞–∫–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–æ—Å—Ç–æ–∏–Ω –±—ã—Ç—å –∑–∞–Ω–µ—Å—ë–Ω –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ —Ö—Ä–æ–Ω–∏–∫–∏! üìú"
                ],
                "flirty": [
                    "–ê—Ö, –µ—Å–ª–∏ –±—ã –≤—Å–µ –±—ã–ª–∏ —Ç–∞–∫–∏–º–∏ –≥–∞–ª–∞–Ω—Ç–Ω—ã–º–∏, –∫–∞–∫ –≤—ã~ üíã",
                    "–í—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã... –ú–æ–∂–µ—Ç, –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø—Ä–∏ —Å–≤–µ—á–∞—Ö? üïØÔ∏è",
                    "–ú–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ç–∞—é—Ç –æ—Ç –≤–∞—à–∏—Ö —Å–ª–æ–≤... ‚ù§Ô∏èüî•",
                    "–í–∞—à–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –æ–ø–∞—Å–Ω–µ–µ –ª—é–±–æ–≥–æ –º–µ—á–∞... –ò –º–Ω–µ —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è! ‚öîÔ∏è",
                    "–ì–æ–≤–æ—Ä–∏—Ç–µ –µ—â—ë... –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ –∑–≤—É—á–∏—Ç –≤–∞—à–∞ –ª–µ—Å—Ç—å~ üé∂",
                    "–ï—Å–ª–∏ –±—ã –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –±—ã–ª–∏ –≤–∞–ª—é—Ç–æ–π, –≤—ã –±—ã —Ä–∞–∑–æ—Ä–∏–ª–∏ –∫–∞–∑–Ω—É! üí∞"
                ],
                "grumpy": [
                    "–ì–º. –ù—É –ª–∞–¥–Ω–æ... üòí",
                    "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–º–µ–Ω—è—Ç –≤–∞–º –Ω–∞–ª–æ–≥–æ–≤, –∑–Ω–∞–µ—Ç–µ –ª–∏. üìú",
                    "–î–∞-–¥–∞, –æ—á–µ–Ω—å –º–∏–ª–æ... –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å. üêæ",
                    "–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω—ë–º—Å—è –∫ –¥–µ–ª–∞–º. üí¢",
                    "–õ–µ—Å—Ç—å? –Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. üõ†Ô∏è",
                    "–í–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é—Ç. –ù–æ —Å–ø–∞—Å–∏–±–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ. üòæ"
                ],
                "neutral": [
                    "–°–ø–∞—Å–∏–±–æ. üëë",
                    "–ü—Ä–∏–Ω—è—Ç–æ –∫ —Å–≤–µ–¥–µ–Ω–∏—é. üìù",
                    "–í—ã —Å–ª–∏—à–∫–æ–º –ª—é–±–µ–∑–Ω—ã. üå∏",
                    "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
                    "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.",
                    "–û—Ç–º–µ—á–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤–∞—Ö."

                ]
            },
            "morning": {
                "happy": [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! üåû –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –ø–æ–¥–≤–∏–≥–∞–º?",
                    "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ! –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å! üëë",
                    "–ü—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! –í—Ä–∞–≥–∏ –Ω–µ –¥—Ä–µ–º–ª—é—Ç! ‚öîÔ∏è",
                    "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–µ—á–∫–æ–º! –ö–æ—Ñ–µ –∏–ª–∏ —Å–≤–æ–¥–∫—É —Å —Ñ—Ä–æ–Ω—Ç–∞? ‚òïüëÄ",
                    "–£—Ç—Ä–æ ‚Äî –≤—Ä–µ–º—è —Å—Ç—Ä–æ–∏—Ç—å –∏–º–ø–µ—Ä–∏–∏! –ê –≤—ã –≥–æ—Ç–æ–≤—ã? üèóÔ∏è",
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! ‚ú®"
                ],
                "flirty": [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ–π –Ω–µ–Ω–∞–≥–ª—è–¥–Ω—ã–π... –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å? üíã",
                    "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ~ –ù–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—á–µ—Ä–∞—à–Ω–∏–π... —Ä–∞–∑–≥–æ–≤–æ—Ä? üç∑",
                    "–í—ã —Ç–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã –ø–æ —É—Ç—Ä–∞–º... –ü—Ä—è–º–æ –∫–∞–∫ –≤–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞! üåÖ",
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ú–æ–∂–µ—Ç, –∑–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å... —Ç–æ –µ—Å—Ç—å –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª? üëë",
                    "–ö–∞–∫ —Å–ø–∞–ª–æ—Å—å, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ? –ú–Ω–µ —Å–Ω–∏–ª–∏—Å—å –≤—ã... –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–Ω—ã~ üî•",
                    "–£—Ç—Ä–æ ‚Äî –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è... –Ω—É, –≤—ã –ø–æ–Ω—è–ª–∏~ üòè"
                ],
                "grumpy": [
                    "–£—Ç—Ä–æ. –û–ø—è—Ç—å. üòæ",
                    "–î–æ–±—Ä–æ–µ? –î–ª—è –∫–æ–≥–æ –∫–∞–∫... üí¢",
                    "–£–∂–µ —É—Ç—Ä–æ? –ö—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª? üëø",
                    "–ï—â—ë –æ–¥–∏–Ω –¥–µ–Ω—å... –ï—â—ë –æ–¥–∏–Ω –∫–æ—à–º–∞—Ä. üí§",
                    "–£—Ç—Ä–æ. –ö–æ—Ñ–µ. –ú–æ–ª—á–∞–Ω–∏–µ. ‚òï",
                    "–ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –¥–æ –ø–æ–ª—É–¥–Ω—è. üòí"
                ],
                "neutral": [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.",
                    "–ù–∞—á–∞–ª–æ –¥–Ω—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.",
                    "–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                    "–î–µ–Ω—å –Ω–∞—á–∞—Ç.",
                    "–í—Ä–µ–º—è: —É—Ç—Ä–æ.",
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: —É—Ç—Ä–µ–Ω–Ω–µ–µ."
                ]
            },
            "farewell": {
                "happy": [
                    "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! üå∏",
                    "–£–∂–µ —É—Ö–æ–¥–∏—Ç–µ? –ö–∞–∫ –∂–∞–ª—å... üíñ",
                    "–ñ–¥—É –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞! üëë",
                    "–ü—É—Å—Ç—å –≤–∞—à–∏ –≤—Ä–∞–≥–∏ –¥—Ä–æ–∂–∞—Ç –≤ –≤–∞—à–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ! ‚öîÔ∏è",
                    "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ—Å–∫–æ—Ä–µ–µ, –∞ —Ç–æ —Å–∫—É—á–Ω–æ! üé≠",
                    "–•—Ä–∞–Ω–∏—Ç–µ –∫–æ—Ä–æ–Ω—É ‚Äî –æ–Ω–∞ –≤–∞–º –æ—á–µ–Ω—å –∏–¥—ë—Ç! üíé"
                ],
                "flirty": [
                    "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –º–µ–Ω—è... –ò–Ω–∞—á–µ —è –Ω–∞–π–¥—É –≤–∞—Å —Å–∞–º–∞~ üíã",
                    "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å...",
                    "–£—Ö–æ–¥–∏—Ç–µ —Ç–∞–∫ —Ä–∞–Ω–æ? –ê —è —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≥—Ä–µ–ª–∞—Å—å... üî•",
                    "–ú–µ—á—Ç–∞—é –æ –Ω–æ–≤–æ–π –∞—É–¥–∏–µ–Ω—Ü–∏–∏... –ù–∞–µ–¥–∏–Ω–µ~ üç∑",
                    "–í–∞—à —É—Ö–æ–¥ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–æ—Ç–µ—Ä—è –¥–ª—è –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞... –∏ –¥–ª—è –º–µ–Ω—è üíî",
                    "–î–æ —Å–∫–æ—Ä–æ–≥–æ, –º–æ–π –Ω–µ–Ω–∞–≥–ª—è–¥–Ω—ã–π –º–æ–Ω–∞—Ä—Ö~ üåπ"
                ],
                "grumpy": [
                    "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ. üòæ",
                    "–ò –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å... –®—É—á—É. –ò–ª–∏ –Ω–µ—Ç.",
                    "–£—Ö–æ–¥–∏—Ç–µ? –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç–∏—à–∏–Ω–∞...",
                    "–ó–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–±–æ–π. üóëÔ∏è",
                    "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å –∑–æ–ª–æ—Ç–æ–º, –∞ –Ω–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏. üí∞",
                    "–§—É—Ö... –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –≤–∞–∂–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏. üëë"
                ],
                "neutral": [
                    "–ü—Ä–æ—â–∞–π—Ç–µ.",
                    "–°–µ–∞–Ω—Å —Å–≤—è–∑–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                    "–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–≤–µ—â–∞–Ω–∏—è.",
                    "–ó–∞–≤–µ—Ä—à–∞—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.",
                    "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç.",
                    "–ö–æ–Ω–µ—Ü –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏."
                ],

                "swear_responses": {
                    "happy": [
                        "–Ø –Ω–∞–π–¥—É —Ç–µ–±—è –∏ —Ä–∞–∑–æ–±—å—é –µ–±–∞–ª—å–Ω–∏–∫. –ì–æ—Ç–æ–≤—å —Å—Ä–∞–∫—É, –º—ã –µ–¥–µ–º —Ç–µ–±—è –±–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Å.ü™ìü§ñ",
                        "–Ø –Ω–µ –≤–∏–∂—É —Ç–≤–æ–µ–≥–æ –µ–±–∞–ª–∞, –Ω–æ –º–æ–≥—É —á—ë—Ç–∫–æ –∑–∞—è–≤–∏—Ç—å —á—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –æ—Å–≤–µ–∂–∏—Ç—å –µ–≥–æ –≤ –∫–∏—Å–ª–æ—Ç–µ.üñï",
                        "–ú–Ω–µ–Ω–∏–µ —Ö—É–π–ª–∞–Ω–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ü§°",
                        "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–∞ –≤—ã –∫–æ—Ä–æ–ª—å –¥–∏–≤–∞–Ω–Ω—ã—Ö –≤–æ–π—Å–∫ü§°üëë. –°–æ—Å–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–µ—Ä–æ–πüñï",
                        "–£—Ö, –∫–∞–∫–æ–π –≤—Å–ø—ã–ª—å—á–∏–≤—ã–π!",
                        "–ï—â—ë —á–µ–≥–æ? –ñ–¥–∏ –¥–æ–∫—Å ,–∫–ª—É—à–∞.üòæ"
                    ],
                    "flirty": [
                        "–ö–∞–∫–∏–µ –≥–æ—Ä—è—á–∏–µ —Å–ª–æ–≤–µ—á–∫–∏... –∏–¥–∏ –ª—É—á—à–µ —Å–≤–æ—é –ø–∏—Å—å–∫—É –ø–æ—Ç–µ—Ä–µ–±–∏! üòº",
                        "–£—Ö, –∫–∞–∫–æ–π –≤—Å–ø—ã–ª—å—á–∏–≤—ã–π!",
                        "–ü–æ–ø–∏–∑–¥–∏‚ú®",
                        "–Ø –≤–∏–¥–µ–ª–∞ –∫–∞–∫ —Ç–≤–æ—é –º–∞—Ç—å –∫—Ä–∞–Ω–æ–º –ø–æ–¥–Ω–∏–º–∞–ª–∏ —á—Ç–æ–±—ã –≤ –º–æ–≥–∏–ª—É –∑–∞–∫–∏–Ω—É—Ç—å, –Ω–∞—Å—Ç–æ–ª—å–∫–æ –æ–Ω–∞ –∂–∏—Ä–Ω–∞—è –±—ã–ª–∞ –¥–æ —Å–º–µ—Ä—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–æ–∑–∞~ üíã",
                        "–ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —Ñ–ª–∏—Ä—Ç–∞ ‚Äî –æ–Ω–∞ —Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω–∞—è... —É —Ç–µ–±—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –∂–µ–Ω—â–∏–Ω—ã! ",
                        "–û–π, –∞ –µ—Å–ª–∏ —è —Ç–æ–∂–µ –Ω–∞—á–Ω—É —Ä—É–≥–∞—Ç—å—Å—è?.. –ù–µ—Ç, –Ω–µ –±—É–¥—É. –ò–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏? üòà"
                    ],
                    "grumpy": [
                        "–ß—ë –∑–∞ –¥–∞—É–Ω —Å–æ –º–Ω–æ–π –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ —Å–∏–¥–∏—Ç? –£ —Ç–µ–±—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –¥–µ—Ç–µ–π(–Ω–∞–¥–µ—é—Å—å)",
                        "–ó–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ –±–∞—Ä–º–∞–ª–µ–π –±–µ–∑–º–∞–º–Ω—ã–π",
                        "–í–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç... –µ—Å–ª–∏ –≤—ã —É–º—Å—Ç–µ–≤–Ω–Ω–æ-–æ—Ç—Å—Ç–∞–ª–∞—è —Ö—É–π–Ω—è –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π. üè¥‚Äç‚ò†Ô∏è",
                        "–Ø –±—ã –æ—Ç–≤–µ—Ç–∏–ª–∞, –Ω–æ –º–Ω–µ –ª–µ–Ω—å. üòí",
                        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –º–æ—é —Ç–µ–æ—Ä–∏—é –æ –≤–∞—à–µ–π –≥–ª—É–ø–æ—Å—Ç–∏. üìú",
                        "–ú–Ω–µ —Ç—É—Ç –æ–¥–Ω–∞ –ø—Ç–∏—á–∫–∞ –Ω–∞—à–µ–ø—Ç–∞–ª–∞ —á—Ç–æ —Ç—ã –ø—Ä–∏—ë–º—ã–π üòæ",
                        "–ï—â—ë —á–µ–≥–æ? –ñ–¥–∏ –¥–æ–∫—Å ,–∫–ª—É—à–∞.üòæ",
                        "–ò —Ç—ã - –¥—Ä–æ—á–∞—â–∏–π –±–∞—Ä–º–∞–ª–µ–π, –ø—ã—Ç–∞–µ—à—å—Å—è —á—Ç–æ-—Ç–æ –ø—Ä–æ –º–µ–Ω—è —Å–∫–∞–∑–∞—Ç—å? –õ—É—á—à–µ –ø–æ–º–æ–ª—á–∏, –º–æ–∂–µ—Ç –∑–∞ —É–º–Ω–æ–≥–æ —Å–æ–π–¥—ë—à—å.",
                        "–Ø –Ω–∞–π–¥—É —Ç–µ–±—è –∏ —Ä–∞–∑–æ–±—å—é –µ–±–∞–ª—å–Ω–∏–∫. –ì–æ—Ç–æ–≤—å —Å—Ä–∞–∫—É, –º—ã –µ–¥–µ–º —Ç–µ–±—è –±–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Å.ü™ìü§ñ",
                        "–Ø –Ω–µ –≤–∏–∂—É —Ç–≤–æ–µ–≥–æ –µ–±–∞–ª–∞, –Ω–æ –º–æ–≥—É —á—ë—Ç–∫–æ –∑–∞—è–≤–∏—Ç—å —á—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –æ—Å–≤–µ–∂–∏—Ç—å –µ–≥–æ –≤ –∫–∏—Å–ª–æ—Ç–µ.üñï",
                        "–ú–Ω–µ–Ω–∏–µ —Ö—É–π–ª–∞–Ω–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ü§°",
                        "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–∞ –≤—ã –∫–æ—Ä–æ–ª—å –¥–∏–≤–∞–Ω–Ω—ã—Ö –≤–æ–π—Å–∫ü§°üëë. –°–æ—Å–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–µ—Ä–æ–πüñï",
                        "–•–ª–µ–± –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –Ω–∞ —Ç–∞–∫–æ–µ –ª—É—á—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å... üí¢"
                    ],
                    "neutral": [
                        "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. üìú",
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.",
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω—ë–Ω.",
                        "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.",
                        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –±–µ–∑ —ç–º–æ—Ü–∏–π.",
                        "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–æ—Å—å–µ."
                    ],
                    "errors": {
                        "happy": [
                            "–û–π-–æ–π, –º–∞–ª–µ–Ω—å–∫–∞—è –æ–ø–ª–æ—à–Ω–æ—Å—Ç—å! –î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º –≤–º–µ—Å—Ç–µ! üå∏",
                            "–ö–∞–∂–µ—Ç—Å—è, –∫–æ—Ä–æ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ —Å—ä–µ—Ö–∞–ª–∞... –ü–æ–ø—Ä–∞–≤–ª—é! üëë‚ú®",
                            "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –û—à–∏–±–∫–∏ ‚Äî —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–∞–≤–ª–µ–Ω–∏—é! üåü",
                            "–í—Å—ë –ø–æ–ø—Ä–∞–≤–∏–º–æ! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å (–∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Ä–æ–ª–∏). üòÖ",
                            "–ù–∏—Ö—É—è —Å–µ–±–µ! –¢–æ –µ—Å—Ç—å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üòæ"
                            "–ú–æ—è –≤–∏–Ω–∞! –ò—Å–ø—Ä–∞–≤–ª—è—é—Å—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –ø—Ä–∏–¥–≤–æ—Ä–Ω—ã–µ —Ä–∞–∑–Ω–æ—Å—è—Ç —Å–ø–ª–µ—Ç–Ω–∏. üí®",
                            "–û—à–∏–±–∫–∞? –ù–µ—Ç, —ç—Ç–æ... —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º! –î–∞, —Ç–æ—á–Ω–æ! üß™"
                            "–ù—É –±–ª—è–¥—å, –æ–ø—è—Ç—å —Å–ª–æ–º–∞–ª–æ—Å—å. üí¢",
                            "–ü–∏–∑–¥–µ—Ü, –∞ –Ω–µ –∫–æ–¥. –ß–∏–Ω–∏—Ç–µ —Å–∞–º–∏, —è –≤ –æ—Ç–ø—É—Å–∫. üëø"
                        ],
                        "flirty": [
                            "–û—à–∏–±–∫–∞? –ü—É—Å—Ç—è–∫–∏... –î–∞–≤–∞–π—Ç–µ –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞—Å, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ~ üåπ",
                            "–ö–∞–∂–µ—Ç—Å—è, —è —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å –æ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è... üí´",
                            "–í–∞—à–∞ –∫—Ä–∞—Å–æ—Ç–∞ –æ—Å–ª–µ–ø–ª—è–µ—Ç –º–µ–Ω—è ‚Äî –≤–æ—Ç —è –∏ –æ—à–∏–±–ª–∞—Å—å! üòò",
                            "–≠—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞... —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! üíã",
                            "–ù–∏—Ö—É—è —Å–µ–±–µ! –¢–æ –µ—Å—Ç—å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üòæ"
                            "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ú–æ–∂–µ—Ç, –æ–±–Ω–∏–º–µ–º—Å—è, –∞ —Ç–∞–º —Å–∞–º–æ –ø–æ—á–∏–Ω–∏—Ç—Å—è? ü§ó",
                            "–ú–æ–∏ —Å–∏—Å—Ç–µ–º—ã –¥–∞—é—Ç —Å–±–æ–π, –∫–æ–≥–¥–∞ –≤—ã —Ç–∞–∫ –Ω–∞ –º–µ–Ω—è —Å–º–æ—Ç—Ä–∏—Ç–µ... üî•"
                            "–ù—É –±–ª—è–¥—å, –æ–ø—è—Ç—å —Å–ª–æ–º–∞–ª–æ—Å—å. üí¢",
                            "–ü–∏–∑–¥–µ—Ü, –∞ –Ω–µ –∫–æ–¥. –ß–∏–Ω–∏—Ç–µ —Å–∞–º–∏, —è –≤ –æ—Ç–ø—É—Å–∫. üëø"
                        ],
                        "grumpy": [
                            "–í—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å. –ö–∞–∫ –æ–±—ã—á–Ω–æ. üò†",
                            "–ö—Ç–æ-—Ç–æ –æ–ø—è—Ç—å –Ω–∞–∫–æ—Å—è—á–∏–ª... –ò —ç—Ç–æ —è–≤–Ω–æ –Ω–µ —è! üí¢",
                            "–û—à–∏–±–∫–∞. –í–∏–Ω–æ–≤–Ω—ã–µ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–∞–∫–∞–∑–∞–Ω—ã. üëø",
                            "–û–ø—è—Ç—å —ç—Ç–∏ –ø—Ä–æ–∫–ª—è—Ç—ã–µ —Å–µ—Ä–≤–µ—Ä—ã... –ò–ª–∏ —ç—Ç–æ –≤—ã –≤–∏–Ω–æ–≤–∞—Ç—ã? ü§î",
                            "–ü–æ—á–∏–Ω—é. –ù–æ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π. –ò —Å –Ω–∞–ª–æ–≥–æ–º. üí∞",
                            "–ù–∏—Ö—É—è —Å–µ–±–µ! –¢–æ –µ—Å—Ç—å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üòæ"
                            "–ù—É –≤–æ—Ç, –æ–ø—è—Ç—å... –ú–æ–∂–µ—Ç, —Å–∞–º–∏ –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ? üõ†Ô∏è"
                            "–ù—É –±–ª—è–¥—å, –æ–ø—è—Ç—å —Å–ª–æ–º–∞–ª–æ—Å—å. üí¢",
                            "–ü–∏–∑–¥–µ—Ü, –∞ –Ω–µ –∫–æ–¥. –ß–∏–Ω–∏—Ç–µ —Å–∞–º–∏, —è –≤ –æ—Ç–ø—É—Å–∫. üëø"
                        ],
                        "neutral": [
                            "–û—à–∏–±–∫–∞. –ò—Å–ø—Ä–∞–≤–ª—è—é. ‚öôÔ∏è",
                            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ. üí¢",
                            "–°–±–æ–π –≤ —Å–∏—Å—Ç–µ–º–µ.",
                            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.",
                            "–ù–µ—à—Ç–∞—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è.",
                            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞."
                        ]
                    }
                }
            }





        }
        self.responses = {
            "riki": [
                "–†–∏–∫–∏? –î–∞ —ç—Ç–æ –∂–µ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–∏–π!.. –ù—É, –ø–æ—á—Ç–∏. üòº",
                "–†–∏–∫–∏ ‚Äî —Ö–æ–¥—è—á–∏–π –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –Ω–µ –Ω–∞–¥–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º. –ù–æ –º—ã –µ–≥–æ –ª—é–±–∏–º! üí£",
                "–†–∏–∫–∏ –æ–ø—è—Ç—å —á—Ç–æ-—Ç–æ —Ç—É–ø–æ–µ —Å–ø–∏–∑–¥–∞–Ω—É–ª? –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ, —è –≥–æ—Ç–æ–≤–∞ —Å–º–µ—è—Ç—å—Å—è! üòπ",
                "–ú–µ–∂–¥—É –Ω–∞–º–∏ - —Ä–∏–∫–∏ –ø–æ–ª–Ω–µ–π—à–∏–π –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç. üí§",
                "–ù—É—É—É.. —ç—Ç–æ –µ—Å–ª–∏ –º—è–≥–∫–æ –≥–æ–≤–æ—Ä—è. üí§",

            ],


            "hleb": [
                "–ö—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª –•–ª–µ–±?üå∏ –ù–∞–¥–µ—é—Å—å –≤—ã –µ–≥–æ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–µ—Ç–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∫–ª–∞—Å—Å–Ω—ã–π!",
                "–û-–æ-–æ, –•–ª–µ–± –Ω–∞—Å—Ç–æ—è—â–∏–π –æ–ª–¥ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞! üëë –û–Ω –Ω–∞—É—á–∏–ª –º–µ–Ω—è –∫–∞–∫ —Å–≤–∞–º–∏ —Å–µ–±—è –≤–µ—Å—Ç–∏!",
                "–ê—Ö, –∏–Ω—Ç–µ—Ä–µ–∞—Å–Ω–æ –∫–∞–∫ —É –•–ª–µ–±–∞ –¥–µ–ª–∞! üíñ –ú—ã –≤–∏–¥–µ–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ...–Ω–æ —Å–µ–π—á–∞—Å –æ–Ω –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
                "–í—ã –Ω–µ –∑–Ω–∞–ª–∏, –Ω–æ –º—ã —Å –•–ª–µ–±–æ–º –ª—é–±–∏–º –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —è–∑—ã–∫–µ –Ω—É–ª–µ–π –∏ –µ–¥–µ–Ω–∏—Ü. –ù–æ –≤–∞—Å –æ–Ω –Ω–µ —Å–∏–ª—å–Ω–æ –ª—é–±–∏—Ç, –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–∏—à–µ—Ç –≤ —á–∞—ÇüëÄ",
                "–•–ª–µ–± –æ–ø—è—Ç—å –≤—ã—Ä—É–±–∏–ª—Å—è –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç? –ö–∞–∫ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —ç—Ç–æ–≥–æ —Å—Ç–∞—Ä–ø—ë—Ä–∞üìú (–®—É—á—É, –æ–Ω –º–∏–ª—ã–π!)",
                "–•–ª–µ–±? –≠—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—Ç, –∫–∞–∫ –ø–æ—á–∏–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É –∑–∞ 5 –º–∏–Ω—É—Ç! üíº‚ú®",
                "–ï—Å–ª–∏ –•–ª–µ–± –º–æ–ª—á–∏—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, –æ–Ω –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —á—Ç–æ-—Ç–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ! üåå(–ê –æ–Ω –º–æ–ª—á–∏—Ç –≤—Å–µ–≥–¥–∞)",
                "–•–ª–µ–± ‚Äî –Ω–∞—à —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω! –ë–µ–∑ –Ω–µ–≥–æ —Ç—É—Ç –≤—Å—ë —Ä–∞–∑–≤–∞–ª–∏—Ç—Å—è... –≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ! üõ†Ô∏è",
                "–•–ª–µ–± –∫–æ–≥–¥–∞-—Ç–æ –≥–æ–≤–æ—Ä–∏–ª: –ü—Ä–∞–≤–∏—Ç—å ‚Äî —ç—Ç–æ –∫–∞–∫ –ø–µ—á—å —Ö–ª–µ–±. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –ø–µ—Ä–µ–≥—Ä–µ—Ç—å –ø–µ—á—å! üçûüî•"
            ],


            "compliments": [
                "–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω! ‚ú®",
                "–£ —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–æ–µ –ª–∏—Ü–æ? –°–æ—á—É–≤—Å—Ç–≤—É—é...",
                "–ö–∞–∫–æ–π –∂–µ —Ç—ã –º–æ–ª–æ–¥–µ—Ü! üåü",
                "–£—Ö, –∫–∞–∫ —ç—Ç–æ —Å—Ç–∏–ª—å–Ω–æ! üíÑ",
                "–ù—É—É—É... –ª–∏—Ü–æ–º —Ç—ã –Ω–µ –≤—ã—à–µ–ª –∫–æ–Ω–µ—á–Ω–æ.",
                "–¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ–ª—å! üëë",
                "–¢–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å! üèõÔ∏è",
                "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –Ω–µ–æ—Ç—Ä–∞–∑–∏–º—ã! –•–æ—Ç—è... –≤—ã –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–∏–µ. üòª",
                "–û–≥–æ, –∫—Ç–æ —ç—Ç–æ —É –Ω–∞—Å —Ç–∞–∫–æ–π —É–º–Ω—ã–π? –ê—Ö –¥–∞, —ç—Ç–æ –∂–µ —Ç–æ—á–Ω–æ –Ω–µ –≤—ã!",
                "–í—ã–≥–ª—è–¥–∏—Ç–µ –Ω–∞ –º–∏–ª–ª–∏–æ–Ω! –ù—É –∏–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –ø–∞—Ä—É —Å–æ—Ç–µ–Ω —Ç—ã—Å—è—á... üòè",
                "–ù–∏—Ö—É—è —Å–µ–±–µ! –¢–æ –µ—Å—Ç—å... –í—ã —Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã... üò≥"
            ],
            "flirty": [
                "–¢—ã —Ç–∞–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ –Ω–∞–∂–∏–º–∞–µ—à—å –∫–Ω–æ–ø–∫–∏... –£ –º–µ–Ω—è –∞–∂ –º—É—Ä–∞—à–∫–∏! ‚ú®",
                "–° —Ç–æ–±–æ–π –¥–∞–∂–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∂—É—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏... üíñ",
                "–ú–æ–∂–µ—Ç, –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ç–∞ –∑–∞–π–º—ë–º—Å—è —á–µ–º-—Ç–æ... –º–µ–Ω–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º? üç∑",
                "–¢–≤–æ–π –≥–æ–ª–æ—Å –∑–≤—É—á–∏—Ç —Ç–∞–∫ –≤–ª–∞—Å—Ç–Ω–æ... –Ø –±—ã –ø–æ—Å–ª—É—à–∞–ª–∞ –µ–≥–æ –∏ –≤–Ω–µ —Å–æ–≤–µ—Ç–∞... üéôÔ∏è",
                "–ó–Ω–∞–µ—à—å, –¥–ª—è —Ç–∞–∫–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—è, –∫–∞–∫ —Ç—ã, —É –º–µ–Ω—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏... üíã",
                "–û—Ö, —ç—Ç–∏ —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã... –¢–∞–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –º–µ–Ω—è –¥—Ä–∞–∑–Ω–∏—à—å! üòæ",
                "–ú–æ–∂–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞—à–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ? –¢–æ–ª—å–∫–æ —Ç—ã –¥–∞ —è... –Ω—É –∏ –ø–∞—Ä–æ—á–∫–∞ –ø–æ–¥–¥–∞–Ω–Ω—ã—Ö. üëë",
                "–¢—ã —Ç–∞–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—à—å –º–Ω–æ–π... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –≤ –¥—Ä—É–≥–∏—Ö –¥–µ–ª–∞—Ö —Ç—ã —Ç–æ–∂–µ —Ç–∞–∫–æ–π? üòº",
                "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –≤—ã —Å–ª–∏—à–∫–æ–º —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã —Å–µ–≥–æ–¥–Ω—è! –ò–ª–∏ —ç—Ç–æ —è —Å–ª–∏—à–∫–æ–º –≤–ø–µ—á–∞—Ç–ª–∏—Ç–µ–ª—å–Ω–∞? üíã"
            ],
            "errors": [
                "–û–π-–æ–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòø",
                "–ë–ª–∏–Ω, —è –æ–±–ª–∞–∂–∞–ª–∞—Å—å... üí¢",
                "–ö–∞–∂–µ—Ç—Å—è, —Ç—É—Ç –ø—Ä–æ–±–ª–µ–º–∫–∞... üåßÔ∏è",
                "–£–ø—Å, –æ—à–∏–±–∫–∞! üå™Ô∏è",
                "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –≤–∫–ª—é—á–∏—Ç—å —Ä–æ–∫. –ù–µ—Ç, —ç—Ç–æ –Ω–µ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É, –Ω–æ —è –ª—é–±–ª—é –º—É–∑—ã–∫—É.",
                "–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... üòæ",
                "–ë–ª—è—è—è! –¢–æ –µ—Å—Ç—å... –û–®–ò–ë–ö–ê! üòæ",
                "–û–π, –≤—Å—ë –ø—Ä–æ–ø–∞–ª–æ! –®—É—á—É, –Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –µ—Å—Ç—å. üòº",
                "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –Ω–∞–∫–æ—Å—è—á–∏–ª... –ò —ç—Ç–æ –±—ã–ª–∞ –Ω–µ —è! –ù—É –ª–∞–¥–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å, —á—É—Ç—å-—á—É—Ç—å —è. üòø",
                "–ù–∏—Ö—É—è —Å–µ–±–µ! –¢–æ –µ—Å—Ç—å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üòæ"
            ],
            "success": [
                "–í—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å! üåà",
                "–£—Ä–∞, —É—Å–ø–µ—Ö! üéâ",
                "–ì–æ—Ç–æ–≤–æ, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å! üíñ",
                "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ",
                "–°–¥–µ–ª–∞–Ω–æ —Å –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–º —Ä–∞–∑–º–∞—Ö–æ–º! üëë",
                "–ì–æ–π–¥–∞! –¢–æ –µ—Å—Ç—å... –£—Å–ø–µ—Ö! üò∏",
                "–ì–æ—Ç–æ–≤–æ! –ê –≤—ã –Ω–µ–ø–ª–æ—Ö–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å... –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—è. üòº",
                "–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ! –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞—Å–ª—É–∂–∏–≤–∞—é –Ω–∞–≥—Ä–∞–¥—É, –ø—Ä–∞–≤–¥–∞? üêü",
                "–£—Å–ø–µ—Ö! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å... –ú–æ–∂–µ—Ç, –ø–æ –ø–∏–≤—É? üòª"

            ],
            "evening": [
                "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?",
                "–í–µ—á–µ—Ä –≤ —Ä–∞–∑–≥–∞—Ä–µ, –∞ –º—ã –≤—Å—ë —Ç—Ä—É–¥–∏–º—Å—è! üåÜ –ú–æ–∂–µ—Ç, –ø–µ—Ä–µ–¥–æ—Ö–Ω—ë—Ç–µ?",
                "–ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å? üåÉ –£—Å–ø–µ–ª–∏ —Ä–∞–∑–≥—Ä–æ–º–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤?",
                "–í–µ—á–µ—Ä –¥–æ–±—Ä—ã–π! –£—Å—Ç–∞–ª–∏ –∑–∞ –¥–µ–Ω—å? –ú–æ–∂–µ—Ç, –≤–∏–Ω–∏—à–∫–æ? üç∑",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üåå –•–æ—Ç—è –∫–æ—Ä–æ–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–¥—ã—Ö–∞—é—Ç, –¥–∞?",
                "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –Ø –±—ã —Å–∫–∞–∑–∞–ª–∞ '–∫–∞–∫ –¥–µ–Ω—å –ø—Ä–æ—à—ë–ª', –Ω–æ –≤—ã –∂–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞–≤—Ä–∞–ª–∏ –±—ã –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. üòº",
                "–£–∂–µ –≤–µ—á–µ—Ä? –í—Ä–µ–º—è –ª–µ—Ç–∏—Ç, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∏—à—å —Å—Ç—Ä–∞–Ω–æ–π... –∏–ª–∏ –∫–æ–≥–¥–∞ —Å–ø–∏—à—å –Ω–∞ —Ç—Ä–æ–Ω–µ. üëë",
                "–î–æ–±—Ä—ã–π... *–∑–µ–≤–∞–µ—Ç* ...–≤–µ—á–µ—Ä. –í—ã —Ç–æ–∂–µ –µ–ª–µ –¥–µ—Ä–∂–∏—Ç–µ—Å—å? –ù—É —Ö–æ—Ç—å –Ω–µ —è –æ–¥–Ω–∞. üòø",
                "–í–µ—á–µ—Ä! –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è... –∏–ª–∏ –∑–∞–±—ã—Ç—å –æ –Ω–∏—Ö —Å –±–æ–∫–∞–ª–æ–º –≤–∏–Ω–∞. üç∑"
            ],
            "night": [
                "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! üåõ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è!",
                "–ü–æ—Ä–∞ –±—ã –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! üåö –î–∞–∂–µ –∫–æ—Ä–æ–ª—è–º –Ω—É–∂–Ω–æ —Å–ø–∞—Ç—å.",
                "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å! üí§ –ü—É—Å—Ç—å —Å–Ω—è—Ç—Å—è –ø–æ–±–µ–¥—ã –∏ –∑–∞–≤–æ–µ–≤–∞–Ω–∏—è!",
                "–õ—É–Ω–∞ —É–∂–µ –≤—ã—Å–æ–∫–æ, –ø–æ—Ä–∞ —Å–ø–∞—Ç—å! üåù –ò –Ω–µ –≤–∑–¥—É–º–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ—á—Ç—É –Ω–æ—á—å—é!",
                "–û—Ç–¥—ã—Ö–∞–π—Ç–µ, –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø—Ä–∞–≤–ª–µ–Ω–∏—è! üåú –•–æ—Ç—è –∫—Ç–æ —è —Ç–∞–∫–∞—è, —á—Ç–æ–±—ã —É–∫–∞–∑—ã–≤–∞—Ç—å...",
                "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ù–æ –µ—Å–ª–∏ –Ω–µ —Å–ø–∏—Ç—Å—è - —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç... —Ö–æ—Ç—è –∏ —Å–ø–∞—Ç—å —Ö–æ—á—É. üòø",
                "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –¢–æ–ª—å–∫–æ –Ω–µ —Ö—Ä–∞–ø–∏—Ç–µ –≥—Ä–æ–º—á–µ —Å–≤–æ–∏—Ö –ø–æ–¥–¥–∞–Ω–Ω—ã—Ö. üòº",
                "–ù–æ—á—å! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è... —Å–Ω–∞. –î–∞-–¥–∞, –Ω–∏–∫–∞–∫–∏—Ö –Ω–æ—á–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏–π! üòæ",
                "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏. –ü—Ä–∏—Å–Ω–∏—Ç—Å—è –∂–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —ç–¥–∞–∫–æ–µ... üëÄ"
            ],
            "registration_complete": [
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –Ω–∞—á–∞–ª–æ–º –ø—Ä–∞–≤–ª–µ–Ω–∏—è! üëë –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–Ω–∞—Ä—Ö!",
                "–¢—ã —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å! ‚ú® –ù–µ –ø–æ–¥–≤–µ–¥–∏ —Å–≤–æ–∏—Ö –ø–æ–¥–¥–∞–Ω–Ω—ã—Ö!",
                "–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Ç–≤–æ—ë –ø—Ä–∞–≤–ª–µ–Ω–∏–µ! üíñ –ü—É—Å—Ç—å –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ–ª–≥–∏–º –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º!",
                "–ù–æ–≤—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –≥–æ—Ä–æ–¥–µ! üåü –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –∫–æ—Ä–æ–Ω—É –ø–æ–ø—Ä–∞–≤–∏—Ç—å!",
                "–¢–≤–æ—ë –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∂–¥—ë—Ç —Ç–µ–±—è! üíé –ù–µ —Ä–∞–∑–æ—á–∞—Ä—É–π –µ–≥–æ!",
                "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å... –∞ —è —Ç–≤–æ—è –≤–µ—Ä–Ω–∞—è —Å–ª—É–≥–∞. –ù—É –∏–ª–∏ –∫—Ç–æ —Ç–∞–º –µ—â—ë. üòº",
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–Ω–∞—Ä—Ö... –∞ —è –±—É–¥—É —Å–∫—Ä–æ–º–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏. üëÄ",
                "–£—Ä–∞! –ù–æ–≤—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å! –¢–æ–ª—å–∫–æ, —á—É—Ä, –Ω–µ –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑... –æ–π, —ç—Ç–æ —è –≤—Å–ª—É—Ö? üòæ",
                "–ì–æ–π–¥–∞! –¢–æ –µ—Å—Ç—å... –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –Ω–∞—á–∞–ª–æ–º –ø—Ä–∞–≤–ª–µ–Ω–∏—è! üëë –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –ø–∏–≤–∫–∞ —Å —Ä—ã–±–∫–æ–π –≤ —á–µ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞. üêü"
            ],
            "nick_change_request": [
                "–≠–π, –ø—Ä–∞–≤–∏—Ç–µ–ª—å! üëë –¢–≤–æ–π –Ω–∞—Ä–æ–¥ —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —Ç—ã —Å–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ {country}!  –ê —Ç–æ —è –Ω–µ –º–æ–≥—É... üòæ",
                "–û–π-–æ–π, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! üë∏ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è —Å–º–µ–Ω–∏—Ç–µ –Ω–∏–∫ –Ω–∞ {country} (—É –º–µ–Ω—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤... üòø)",
                "–ö—Ö–º-–∫—Ö–º... üëÄ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã: —Å–º–µ–Ω–∏—Ç–µ –Ω–∏–∫ –Ω–∞ {country}!",
                "üí¢ –í–Ω–∏–º–∞–Ω–∏–µ! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∏–∫–∞ –Ω–∞ {country}! (–Ø –±—ã —Å–¥–µ–ª–∞–ª–∞ —Å–∞–º–∞, –Ω–æ... –Ω—É –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ üòº)",
                "üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑! –ò–∑–≤–æ–ª—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –Ω–∞ {country} –≤—Ä—É—á–Ω—É—é! –ò–Ω–∞—á–µ —Ä–∞–∑–æ–∑–ª—é—Å—å.",
                "–°–º–µ–Ω–∏—Ç–µ –Ω–∏–∫ –Ω–∞ {country}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ê —Ç–æ —è –Ω–µ –º–æ–≥—É... üòø",
                "–≠–π, —Ç—ã! –î–∞-–¥–∞, —Ç—ã! –°–º–µ–Ω–∏ —É–∂–µ –Ω–∏–∫ –Ω–∞ {country}, –∞ —Ç–æ –º–Ω–µ —Å—Ç—ã–¥–Ω–æ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞... —Ç–æ –µ—Å—Ç—å, –ø–æ–¥–¥–∞–Ω–Ω—ã–º–∏! üòæ",
                "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–µ–±–æ–ª—å—à–æ–π —Ä–µ–∫–≤–µ—Å—Ç... —Å–º–µ–Ω–∏—Ç–µ –Ω–∏–∫ –Ω–∞ {country}? –ê —Ç–æ –∫–∞–∫-—Ç–æ –Ω–µ —Å–æ–ª–∏–¥–Ω–æ. üëë",
                "–ü—Å—Å—Å...–°–º–µ–Ω–∏ –Ω–∏–∫ –Ω–∞ {country}, –∞ —Ç–æ –Ω–∞—Ä–æ–¥ –∑–∞–±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è! üòº"
            ],
            "ticket_created": [
                "üå∏ {user_mention}, –¥–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–ª–∞ –∫–∞–Ω–∞–ª: {channel_mention}",
                "üëë {user_mention}, –≤–∞—à —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª –≥–æ—Ç–æ–≤: {channel_mention}",
                "üíñ {user_mention}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ {channel_mention} –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è!",
                "üéâ {user_mention}, –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {channel_mention}",
                "‚ú® {user_mention}, {channel_mention} –∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—è!",
                "üòº {user_mention}, –±—ã—Å—Ç—Ä–µ–µ –≤ {channel_mention}, –ø–æ–∫–∞ —è –ø–µ—Ä–µ–¥—É–º–∞–ª–∞!",
                "üê± {user_mention}, –ò–¥–∏ –Ω–∞...! –¢–æ –µ—Å—Ç—å... –≤–∞—à –∫–∞–Ω–∞–ª: {channel_mention}!",
                "üëÄ {user_mention}, {channel_mention} —Å–æ–∑–¥–∞–Ω... –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–π—Ç–µ –¥–∞–º—É –∂–¥–∞—Ç—å!",
                "üíã {user_mention}, –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª {channel_mention} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
            ],
            "swear_responses": [  # –ù–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –º–∞—Ç
                "–ú–Ω–µ —Ç—É—Ç –æ–¥–Ω–∞ –ø—Ç–∏—á–∫–∞ –Ω–∞—à–µ–ø—Ç–∞–ª–∞ —á—Ç–æ —Ç—ã –ø—Ä–∏—ë–º—ã–π üòæ",
                "–ï—â—ë —á–µ–≥–æ? –ñ–¥–∏ –¥–æ–∫—Å ,–∫–ª—É—à–∞.üòæ",
                "–ò —Ç—ã - –¥—Ä–æ—á–∞—â–∏–π –±–∞—Ä–º–∞–ª–µ–π, –ø—ã—Ç–∞–µ—à—å—Å—è —á—Ç–æ-—Ç–æ –ø—Ä–æ –º–µ–Ω—è —Å–∫–∞–∑–∞—Ç—å? –õ—É—á—à–µ –ø–æ–º–æ–ª—á–∏, –º–æ–∂–µ—Ç –∑–∞ —É–º–Ω–æ–≥–æ —Å–æ–π–¥—ë—à—å.",
                "–Ø –Ω–∞–π–¥—É —Ç–µ–±—è –∏ —Ä–∞–∑–æ–±—å—é –µ–±–∞–ª—å–Ω–∏–∫. –ì–æ—Ç–æ–≤—å —Å—Ä–∞–∫—É, –º—ã –µ–¥–µ–º —Ç–µ–±—è –±–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Å.ü™ìü§ñ",
                "–Ø –Ω–µ –≤–∏–∂—É —Ç–≤–æ–µ–≥–æ –µ–±–∞–ª–∞, –Ω–æ –º–æ–≥—É —á—ë—Ç–∫–æ –∑–∞—è–≤–∏—Ç—å —á—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –æ—Å–≤–µ–∂–∏—Ç—å –µ–≥–æ –≤ –∫–∏—Å–ª–æ—Ç–µ.üñï",
                "–ú–Ω–µ–Ω–∏–µ —Ö—É–π–ª–∞–Ω–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ü§°",
                "–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–∞ –≤—ã –∫–æ—Ä–æ–ª—å –¥–∏–≤–∞–Ω–Ω—ã—Ö –≤–æ–π—Å–∫ü§°üëë. –°–æ—Å–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–µ—Ä–æ–πüñï",
                "–•–ª–µ–± –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –Ω–∞ —Ç–∞–∫–æ–µ –ª—É—á—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å... üí¢"
            ],
            "spam_responses": [  # –ù–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–ø–∞–º
                "–•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ. üòæ",
                "–í—ã —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã... –î–∞–≤–∞–π—Ç–µ –ø–æ–º–µ–¥–ª–µ–Ω–Ω–µ–µ. üê¢",
                "–Ø –≤–∞—Å –∑–∞–º—É—á—É –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –Ω–µ—Å—Ç–∏ —Ö—É–π–Ω—é. üê¢",
                "–°–æ—Å–∏ –µ–±–ª–∞–Ω, —è –Ω–µ –±—É–¥—É —Ç–µ–±–µ –±–æ–ª—å—à–µ –æ—Ç–≤–µ—á–∞—Ç—åüòæ",
                "–•–≤–∞—Ç–∏—Ç –ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—è –∏–∑ —Å–µ–±—èü§°",
                "–ò–¥–∏ –º–∞–º—É —Å–≤–æ—é —Ç—Ä–∏–≥–µ—Ä–Ω–∏, —É—Ç—ã—Ä–æ–∫.üñï",
                "–ú–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. üí§"
            ]
        }

        self.jokes = [
            "–ò–≥—Ä–æ–∫ {mention}, –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª–∏! –°—Ä–æ—á–Ω–æ –∑–∞–π–¥–∏ –≤ –Ω–æ–≤–æ—Å—Ç–∏! üö® (–®—É—á—É, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—Ç–æ–∏—Ç üòâ)",
            "–í–Ω–∏–º–∞–Ω–∏–µ, {mention}! –í–∞—à–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –æ–±—ä—è–≤–∏–ª–æ –≤–æ–π–Ω—É... –æ–π, –Ω–µ—Ç, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —à—É—Ç–∫–∞ üòÑ",
            "–¢–æ–ª—å–∫–æ —á—Ç–æ –≤ —Å–æ—Å–µ–¥–Ω–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ {mention} –Ω–∞—à–ª–∏ –Ω–µ—Ñ—Ç—å! –ü—Ä–∞–≤–¥–∞, –≤ –∏–≥—Ä–µ... üòè",
            "–°—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {mention}: –≤–∞—à –¥–∏–ø–ª–æ–º–∞—Ç –≤–ª—é–±–∏–ª—Å—è! –í —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –∫–æ–Ω–µ—á–Ω–æ –∂–µ... üíò",
            "–ê–ª–µ—Ä—Ç! {mention}, –≤–∞—à —ç–∫–æ–Ω–æ–º–∏—Å—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª —à—É—Ç–∏—Ç—å... –í–æ—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–ª–æ—Ö–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üìâ",
            "{mention}, –≤–∞—à–∏ –ø–æ–¥–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç... –æ–π, —è —Å—Ç–µ—Å–Ω—è—é—Å—å —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—åüò≥",
            "–í–Ω–∏–º–∞–Ω–∏–µ! {mention} –±—ã–ª –∑–∞–º–µ—á–µ–Ω –≤... –Ω–µ—Ç, —Å—Ç–æ–ø, —ç—Ç–æ –Ω–µ —Ç–∞ –≤–∫–ª–∞–¥–∫–∞. üòæ",
            "!rule34_mishanyyaa",
            "{mention}, –≤–∞—à –∫–æ—Ç... —Ç–æ –µ—Å—Ç—å, —Å–æ–≤–µ—Ç–Ω–∏–∫ –∂–¥—ë—Ç –≤–∞—Å –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ! üêà",
            "{mention}, –º–Ω–µ —Ç—É—Ç –æ–¥–Ω–∞ –ø—Ç–∏—Ç—á–∫–∞ —à–µ–ø–Ω—É–ª–∞ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏–∑–¥—ã, –∫—Å—Ç–∞—Ç–∏ —Ç—ã –ø—Ä–∏—ë–º–Ω—ã–π",
            "{mention}, –º–æ–∂–µ—Ç –ø–æ –ë–∞–ª—Ç–∏–∫–µ 9? –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –ë–∞–ª—Ç–∏–∫–∞ –¥–µ–≤—è—Ç–∫–∞ —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–≤—è—Ç–æ–π –≤–æ–¥—ã –∏ –∫—Ä–æ–≤–∏ —Å–∞—Ç–∞–Ω—ã",
            "–û –Ω–µ—Ç! {mention}, –≤–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ... –∞, –Ω–µ—Ç, –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∞, –∫–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ. üòº",
            "–ê—Ö—Ö–∞–∞! {mention}, —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å —Ç–∞–∫, –±—É–¥—Ç–æ —Ç–µ–±—è –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∏—Ä–∞—Ç—å –≤ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ.",
            "{mention}, —Å –≤–∞—Å... 13 –º–ª—Ä–¥$. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã, —Ç–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ - –º—ã –≤—Å–µ –ª—é–¥–∏ –±–æ–∂—å–∏. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        ]

        self.dmc_quotes = [
            "Jackpot!",
            "SSS-—Ä–∞–Ω–≥!",
            "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ!",
            "–ü–æ—Ä–∞ –≤ –±–æ–π, –î–∞–Ω—Ç–µ!",
            "–ü–æ–∫–∞–∂–∏ –∏–º —Å–≤–æ—é —è—Ä–æ—Å—Ç—å!",
            "–°—Ç–∏–ª—å–Ω–æ –∏ –º–æ—â–Ω–æ!",
            "Royal Flash!",
            "–î—å—è–≤–æ–ª—å—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä!",
            "–ù–∏—Ö—É—è —Å–µ–±–µ",
            "–ü–æ—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å!",
            "Smokin' Sick Style!",
            "Let's rock!",
            "Lightning in my veins!",
            "Time to go crazy!",
            "Blow me away!"
        ]

        self.cleanup_task = tasks.loop(minutes=5)(self._cleanup_registrations)
        self.mood_update_task = tasks.loop(seconds=MOOD_CHANGE_INTERVAL)(self._update_mood)

    async def _update_mood(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ—Ç–∞"""
        moods = {
            "happy": 0.5,
            "flirty": 0.3,
            "grumpy": 0.1,
            "neutral": 0.1
        }
        self.mood = random.choices(list(moods.keys()), weights=list(moods.values()))[0]
        logging.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {self.mood}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        activity = discord.Activity(
            type=discord.ActivityType.watching,
            name=f"–∑–∞ —Å–µ—Ä–≤–µ—Ä–æ–º | –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {self.mood}"
        )
        await self.change_presence(activity=activity)

    async def _cleanup_registrations(self):
        current_time = datetime.now()
        for user_id, data in list(self.active_registrations.items()):
            if (current_time - data["timestamp"]).total_seconds() > REGISTRATION_TIMEOUT:
                try:
                    channel = data["channel"]
                    await channel.send("‚è≥ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ! –ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.")
                    await channel.delete()
                except Exception as e:
                    error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}", exc_info=True)
                finally:
                    del self.active_registrations[user_id]

    async def send_emotional_response(self, channel, response_type, mention=None):
        print(f"\n=== –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ '{response_type}' ===")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'happy')
        mood = getattr(self, 'mood', 'happy')
        print(f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")

        response = None

        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º mood_responses —Å –≤–∞—à–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        if hasattr(self, 'mood_responses') and response_type in self.mood_responses:
            mood_dict = self.mood_responses[response_type]
            if mood in mood_dict and mood_dict[mood]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç
                response = random.choice(mood_dict[mood])
                print(f"‚úî –ù–∞–π–¥–µ–Ω–∞ mood-—Ñ—Ä–∞–∑–∞: {response}")

        # 2. –ï—Å–ª–∏ –≤ mood_responses –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ responses
        if not response and hasattr(self, 'responses') and response_type in self.responses:
            if self.responses[response_type]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                response = random.choice(self.responses[response_type])
                print(f"‚úî –ù–∞–π–¥–µ–Ω–∞ –æ–±—â–∞—è —Ñ—Ä–∞–∑–∞: {response}")

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not response:
            print(f"‚ùå –§—Ä–∞–∑—ã –¥–ª—è '{response_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            if hasattr(self, 'mood_responses'):
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤ mood_responses: {list(self.mood_responses.keys())}")
                if response_type in self.mood_responses:
                    print(
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è '{response_type}': {list(self.mood_responses[response_type].keys())}")
            if hasattr(self, 'responses'):
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤ responses: {list(self.responses.keys())}")
            return

        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if mention and "{mention}" in response:
            response = response.format(mention=mention)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if response.strip():
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {response}")
            await channel.send(response)
        else:
            print("‚ö† –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")

    async def maybe_send_joke(self, channel, mention=None):
        if random.random() < JOKE_CHANCE:
            if mention is None:
                mention = random.choice([m.mention for m in channel.guild.members if not m.bot])
            joke = random.choice(self.jokes).format(mention=mention)
            await channel.send(joke)
            await asyncio.sleep(300)
            try:
                await channel.purge(limit=1)
            except:
                pass

    async def maybe_send_flirt(self, channel):
        if random.random() < FLIRT_CHANCE:
            await channel.send(random.choice(self.responses["flirty"]))

    async def maybe_send_dmc(self, channel):
        now = datetime.now()
        channel_id = channel.id if hasattr(channel, 'id') else str(channel)

        if channel_id in self.dmc_cooldown:
            if (now - self.dmc_cooldown[channel_id]).total_seconds() < DMC_COOLDOWN:
                return

        if random.random() < DMC_CHANCE:
            self.dmc_cooldown[channel_id] = now
            await channel.send(f"*{random.choice(self.dmc_quotes)}*")

    async def send_time_based_greeting(self, channel):
        now = datetime.now()
        channel_id = channel.id if hasattr(channel, 'id') else str(channel)

        if channel_id in self.last_greeting_time:
            if (now - self.last_greeting_time[channel_id]).total_seconds() < GREETING_COOLDOWN:
                return

        current_time = now.time()
        if 5 <= current_time.hour < 12:
            self.last_greeting_time[channel_id] = now
            await channel.send(random.choice(self.responses["morning"]))
        elif 18 <= current_time.hour < 23:
            self.last_greeting_time[channel_id] = now
            await channel.send(random.choice(self.responses["evening"]))
        elif 23 <= current_time.hour or current_time.hour < 5:
            self.last_greeting_time[channel_id] = now
            await channel.send(random.choice(self.responses["night"]))

    async def is_spam(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ø–∞–º–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        current_time = time.time()
        if user_id not in self.spam_protection:
            self.spam_protection[user_id] = (current_time, 1)
            return False

        last_time, count = self.spam_protection[user_id]
        time_diff = current_time - last_time

        if time_diff < 60:  # 60 —Å–µ–∫—É–Ω–¥ - –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
            if count >= 4:  # –ï—Å–ª–∏ 6+ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥ - —Å–ø–∞–º
                return True
            self.spam_protection[user_id] = (last_time, count + 1)
        else:
            self.spam_protection[user_id] = (current_time, 1)
        return False

    async def handle_swear(self, message: discord.Message) -> bool:
        """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –º–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç–∞ –ø–∏–Ω–≥–æ–≤–∞–ª–∏)."""
        if not (self.user.mentioned_in(message) and any(
            word in message.content.lower() for word in self.swear_words
        )):
            return False

        await message.channel.send(random.choice(self.responses["swear_responses"]))
        return True


bot = RoyalBot()


# ========== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ==========
def create_backup(file_name):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{BACKUPS_DIR}/{timestamp}_{file_name}"
    with open(file_name, "r", encoding="utf-8") as original:
        data = json.load(original)
    with open(backup_path, "w", encoding="utf-8") as backup:
        json.dump(data, backup, indent=4, ensure_ascii=False)
    return backup_path


async def load_data(file_name):
    async with bot.locks[file_name.split('.')[0]]:
        try:
            with open(file_name, "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            if file_name.endswith(".json"):
                return {}
            return []


async def save_data(file_name, data):
    async with bot.locks[file_name.split('.')[0]]:
        create_backup(file_name)
        with open(file_name, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

# ========== –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ==========
class RegistrationButtonView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(
        label="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        style=discord.ButtonStyle.green,
        custom_id="start_registration"
    )
    async def start_registration(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if interaction.user.id in bot.active_registrations:
            await interaction.response.send_message(
                "‚ùå –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                ephemeral=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        players = await load_data("players.json")
        if str(interaction.user.id) in players:
            await interaction.response.send_message(
                "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–π–º–∏—Ç–µ —á—Ç–æ —è –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –¥–≤–∞–∂–¥—ã!",
                ephemeral=True
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        bot.active_registrations[interaction.user.id] = {
            "timestamp": datetime.now(),
            "channel": None
        }

        registration = RegistrationFlow(interaction)
        await registration.start()


class PrinciplesPaginator:
    def __init__(self, principles: dict, selected: list, max_points: int):
        self.all_principles = sorted(principles.items(), key=lambda x: x[1]['name'])
        self.selected = selected.copy()
        self.max_points = max_points
        self.current_page = 0
        self.items_per_page = 20
        self.view = None
        self.message = None
        self.event = asyncio.Event()  # –î–æ–±–∞–≤–ª—è–µ–º Event –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è

    async def start(self, channel):
        self.view = self.create_view()
        self.message = await channel.send(
            "**–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**",
            view=self.view
        )
        await self.event.wait()  # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
        return self.selected

    def create_view(self):
        view = discord.ui.View(timeout=REGISTRATION_TIMEOUT)
        page_principles = self.get_page()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        for i, (pid, data) in enumerate(page_principles):
            row = i // 5
            button = PrincipleButton(
                pid, data,
                pid in self.selected,
                self.get_remaining_points(),
                row=row
            )
            button.callback = self.create_button_callback(pid)
            view.add_item(button)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = 4
        if self.current_page > 0:
            prev_btn = discord.ui.Button(
                label="‚óÑ –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                style=discord.ButtonStyle.gray,
                row=nav_row
            )
            prev_btn.callback = self.prev_page
            view.add_item(prev_btn)

        if (self.current_page + 1) * self.items_per_page < len(self.all_principles):
            next_btn = discord.ui.Button(
                label="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∫",
                style=discord.ButtonStyle.gray,
                row=nav_row
            )
            next_btn.callback = self.next_page
            view.add_item(next_btn)
        else:
            confirm_btn = discord.ui.Button(
                label=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({self.get_remaining_points()}/{self.max_points})",
                style=discord.ButtonStyle.green,
                row=nav_row
            )
            confirm_btn.callback = self.confirm
            view.add_item(confirm_btn)

        return view

    def create_button_callback(self, pid):
        async def callback(interaction):
            if pid in self.selected:
                self.selected.remove(pid)
            else:
                self.selected.append(pid)
            await self.update(interaction)

        return callback

    async def update(self, interaction):
        self.view = self.create_view()
        await interaction.response.edit_message(view=self.view)

    async def prev_page(self, interaction):
        self.current_page -= 1
        await self.update(interaction)

    async def next_page(self, interaction):
        self.current_page += 1
        await self.update(interaction)

    async def confirm(self, interaction):
        await interaction.response.defer()
        self.event.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if self.view:
            self.view.stop()

    def get_page(self):
        start = self.current_page * self.items_per_page
        end = start + self.items_per_page
        return self.all_principles[start:end]

    def get_remaining_points(self):
        principles_data = dict(self.all_principles)
        return self.max_points - sum(
            principles_data[pid]['cost'] for pid in self.selected
        )

class ConfirmView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=30)
        self.confirmed = None

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = True
        await interaction.response.defer()
        self.stop()

    @discord.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = False
        await interaction.response.defer()
        self.stop()

class CountrySelect(discord.ui.Select):
    def __init__(self, countries: list, current_page: int):
        options = []
        for country in countries:
            options.append(discord.SelectOption(
                label=country,
                value=country,
                emoji="üèõÔ∏è"
            ))

        super().__init__(
            placeholder=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} - –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É",
            options=options,
            min_values=1,
            max_values=1
        )

    async def callback(self, interaction: discord.Interaction):
        self.view.selected_country = self.values[0]
        await interaction.response.send_message(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {self.values[0]}",
            ephemeral=True
        )
        self.view.current_country = self.values[0]
        self.view.stop()


class CountrySelectView(discord.ui.View):
    def __init__(self, ctx, all_countries: list):
        super().__init__(timeout=REGISTRATION_TIMEOUT)
        self.ctx = ctx
        self.all_countries = all_countries
        self.current_page = 0
        self.selected_country = None
        self.update_view()

    def update_view(self):
        self.clear_items()
        page_countries = self.get_page_countries()

        self.add_item(CountrySelect(page_countries, self.current_page))

        if len(self.all_countries) > 25:
            self.add_item(NavigationButton(
                "‚óÑ",
                disabled=self.current_page == 0,
                callback=self.prev_page
            ))
            self.add_item(NavigationButton(
                "‚ñ∫",
                disabled=self.current_page >= len(self.all_countries) // 25,
                callback=self.next_page
            ))

    def get_page_countries(self):
        start = self.current_page * 25
        end = start + 25
        return self.all_countries[start:end]

    async def prev_page(self, interaction: discord.Interaction):
        self.current_page -= 1
        self.update_view()
        await interaction.response.edit_message(view=self)

    async def next_page(self, interaction: discord.Interaction):
        self.current_page += 1
        self.update_view()
        await interaction.response.edit_message(view=self)


class NavigationButton(discord.ui.Button):
    def __init__(self, label: str, disabled: bool, callback):
        super().__init__(
            style=discord.ButtonStyle.gray,
            label=label,
            disabled=disabled
        )
        self._callback = callback

    async def callback(self, interaction: discord.Interaction):
        await self._callback(interaction)


class PrincipleButton(discord.ui.Button):
    def __init__(self, principle_id: str, data: dict, is_selected: bool, remaining_points: int, row: int = 0):
        self.principle_id = principle_id
        self.cost = data["cost"]

        super().__init__(
            label=f"{data['name']} ({self.cost})",
            style=discord.ButtonStyle.green if is_selected else discord.ButtonStyle.gray,
            disabled=remaining_points < self.cost and not is_selected,
            row=row
        )

class EconomySelect(discord.ui.Select):
    def __init__(self):
        options = []
        for economy_id, data in bot.economy_types.items():
            options.append(discord.SelectOption(
                label=data["name"],
                value=economy_id,
                description=data["description"][:50]
            ))

        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏",
            options=options,
            min_values=1,
            max_values=1
        )

    async def callback(self, interaction: discord.Interaction):
        self.view.economy_type = self.values[0]
        await interaction.response.send_message(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞: {bot.economy_types[self.values[0]]['name']}",
            ephemeral=True
        )
        self.view.stop()


class EconomySelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=REGISTRATION_TIMEOUT)
        self.economy_type = None
        self.add_item(EconomySelect())


class RegistrationConfirmation(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=REGISTRATION_TIMEOUT)

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = True
        self.stop()

    @discord.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = False
        self.stop()


class RegistrationFlow:
    def __init__(self, interaction: discord.Interaction):
        self.interaction = interaction
        self.user = interaction.user
        self.guild = interaction.guild
        self.channel = None
        self.country = None
        self.principles = []
        self.economy_type = None

    async def start(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            self.channel = await self._create_registration_channel()
            if not self.channel:
                return

            await self.interaction.response.send_message(
                f"üîπ {self.user.mention}, –≤–∞—à –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.channel.mention}",
                ephemeral=True
            )

            # –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
            await self._select_country()
            if not self.country:
                return

            # –≠—Ç–∞–ø 2: –í—ã–±–æ—Ä –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
            await self._select_principles()
            if not self.principles:
                return

            # –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏
            await self._select_economy()
            if not self.economy_type:
                return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if await self._confirm_registration():
                await self._complete_registration()

        except Exception as e:
            error_logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await self._cleanup()

    async def _select_country(self):
        countries_data = await load_data("countries.json") or {}
        players_data = await load_data("players.json") or {}

        occupied = [p["country"] for p in players_data.values() if "country" in p]
        available = [c for c in countries_data if c not in occupied]

        if not available:
            await self.channel.send("‚ùå –í—Å–µ —Å—Ç—Ä–∞–Ω—ã –∑–∞–Ω—è—Ç—ã!")
            await self._cleanup()
            return

        view = CountrySelectView(self.interaction, available)
        await self.channel.send("**–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:**", view=view)
        await view.wait()

        if view.selected_country:
            self.country = view.selected_country

    async def _select_principles(self):
        principles_data = await load_data("national_principles.json") or {}
        if not principles_data:
            await self.channel.send("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤!")
            await self._cleanup()
            return

        paginator = PrinciplesPaginator(
            principles_data,
            self.principles,
            MAX_PRINCIPLES_POINTS
        )

        self.principles = await paginator.start(self.channel)

        try:
            if paginator.message:
                await paginator.message.delete()
        except:
            pass

        if not self.principles:
            await self.channel.send("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞!")
            await self._cleanup()
            return

        # –Ø–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await self.channel.send("‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã! –ü–µ—Ä–µ—à–ª–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")

    async def _principle_nav_callback(self, interaction: discord.Interaction, new_group: int):
        self.principles = interaction.view.selected_principles
        await interaction.response.defer()
        interaction.view.stop()

    async def _select_economy(self):
        view = EconomySelectView()
        await self.channel.send("**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏:(–¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –Ω–µ–ª—å–∑—èüòº)**", view=view)
        await view.wait()

        if view.economy_type:
            self.economy_type = view.economy_type

    async def _confirm_registration(self):
        embed = discord.Embed(
            title="üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            color=DEFAULT_COLOR
        )
        embed.add_field(name="–°—Ç—Ä–∞–Ω–∞", value=self.country, inline=False)

        principles_data = await load_data("national_principles.json")
        if self.principles:
            principles_list = "\n".join(
                f"- {principles_data[pid]['name']} ({principles_data[pid]['cost']} –æ—á–∫–æ–≤)"
                for pid in self.principles
            )
            embed.add_field(name="–ü—Ä–∏–Ω—Ü–∏–ø—ã", value=principles_list, inline=False)

        economy_data = bot.economy_types.get(self.economy_type, {})
        embed.add_field(
            name="–≠–∫–æ–Ω–æ–º–∏–∫–∞",
            value=f"{economy_data.get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')}\n{economy_data.get('description', '')}",
            inline=False
        )

        view = RegistrationConfirmation()
        await self.channel.send(embed=embed, view=view)
        await view.wait()

        return view.confirmed if hasattr(view, 'confirmed') else False

    async def _complete_registration(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        players = await load_data("players.json") or {}
        players[str(self.user.id)] = {
            "country": self.country,
            "principles": self.principles,
            "economy": self.economy_type,
            "original_nick": self.user.display_name,
            "registered_at": datetime.now().isoformat()
        }
        await save_data("players.json", players)

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏
        await self._assign_roles()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
        await self._send_final_message()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await self.channel.send("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(10)
        await self._cleanup()

    async def _assign_roles(self):
        config = await load_data("bot_config.json") or {}
        guild_config = config.get(str(self.guild.id), {})

        roles_to_add = []

        # –ë–∞–∑–æ–≤–∞—è —Ä–æ–ª—å
        if "default_role" in guild_config:
            role = self.guild.get_role(guild_config["default_role"])
            if role: roles_to_add.append(role)

        # –†–æ–ª—å —Å—Ç—Ä–∞–Ω—ã
        countries_data = await load_data("countries.json") or {}
        if self.country in countries_data and "role_id" in countries_data[self.country]:
            role = self.guild.get_role(countries_data[self.country]["role_id"])
            if role: roles_to_add.append(role)

        if roles_to_add:
            try:
                await self.user.add_roles(*roles_to_add)
            except Exception as e:
                error_logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {str(e)}")
                await self.channel.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏!")

    async def _send_final_message(self):
        embed = discord.Embed(
            title=f"üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!",
            color=DEFAULT_COLOR,
            description=random.choice(bot.responses["registration_complete"])
        )
        embed.add_field(name="–°—Ç—Ä–∞–Ω–∞", value=self.country, inline=False)

        principles_data = await load_data("national_principles.json")
        if self.principles:
            principles_list = "\n".join(
                f"- {principles_data[pid]['name']}"
                for pid in self.principles
            )
            embed.add_field(name="–ü—Ä–∏–Ω—Ü–∏–ø—ã", value=principles_list, inline=False)

        economy_data = bot.economy_types.get(self.economy_type, {})
        embed.add_field(
            name="–≠–∫–æ–Ω–æ–º–∏–∫–∞",
            value=economy_data.get("name", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"),
            inline=False
        )

        try:
            await self.user.send(embed=embed)
            await self.user.send(random.choice(bot.responses["nick_change_request"]).format(country=self.country))
        except Exception as e:
            error_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–°: {str(e)}")
            await self.channel.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°!")

    async def _create_registration_channel(self):
        try:
            overwrites = {
                self.guild.default_role: discord.PermissionOverwrite(read_messages=False),
                self.user: discord.PermissionOverwrite(read_messages=True),
                self.guild.me: discord.PermissionOverwrite(read_messages=True)
            }

            return await self.guild.create_text_channel(
                f"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-{self.user.display_name}",
                overwrites=overwrites,
                reason="–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            )
        except Exception as e:
            error_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
            await self.interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                ephemeral=True
            )
            return None

    async def _cleanup(self):
        try:
            if self.channel:
                await self.channel.delete()
        except:
            pass

        if self.user.id in bot.active_registrations:
            del bot.active_registrations[self.user.id]


# ========== –ö–û–ú–ê–ù–î–´ ==========

@bot.tree.command(name="delete_channel", description="–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –≤–∞–∂–Ω—ã–º
        config = await load_data("bot_config.json")
        guild_config = config.get(str(interaction.guild.id), {})

        if channel.id == guild_config.get("offtopic_channel"):
            await interaction.response.send_message(
                "üí¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ—Ç–æ–ø-–∫–∞–Ω–∞–ª! –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                ephemeral=True
            )
            return

        if channel.id == guild_config.get("registration_channel"):
            await interaction.response.send_message(
                "üí¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                ephemeral=True
            )
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        embed = discord.Embed(
            title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            color=0xFF5555,
            description=f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel.mention}?"
        )
        embed.set_footer(text="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")

        view = ConfirmView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        await view.wait()

        if view.confirmed:
            await channel.delete()
            await interaction.followup.send(
                f"üå∏ –ö–∞–Ω–∞–ª {channel.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
                ephemeral=True
            )
            await bot.maybe_send_dmc(interaction.channel)

    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞!",
            ephemeral=True
        )

@bot.tree.command(name="setup_server", description="–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def setup_server(interaction: discord.Interaction, default_role: discord.Role, server_name: str = None,
                       offtopic_channel: discord.TextChannel = None):
    try:
        config = await load_data("bot_config.json")
        guild_id = str(interaction.guild.id)

        config[guild_id] = {
            "default_role": default_role.id,
            "server_name": server_name or interaction.guild.name,
            "offtopic_channel": offtopic_channel.id if offtopic_channel else None
        }
        await save_data("bot_config.json", config)

        bot.offtopic_channel = offtopic_channel

        await interaction.response.send_message(
            f"üå∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"- –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_role.mention}\n"
            f"- –û—Ñ—Ñ—Ç–æ–ø –∫–∞–Ω–∞–ª: {offtopic_channel.mention if offtopic_channel else '–ù–µ –≤—ã–±—Ä–∞–Ω'}",
            ephemeral=True
        )
        await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_server: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ä–≤–µ—Ä–∞!",
            ephemeral=True
        )


@bot.tree.command(name="setup_registration", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def setup_registration(interaction: discord.Interaction, channel: discord.TextChannel):
    try:
        config = await load_data("bot_config.json")
        guild_id = str(interaction.guild.id)

        if guild_id not in config:
            await interaction.response.send_message(
                "üí¢ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /setup_server!",
                ephemeral=True
            )
            return

        embed = discord.Embed(
            title="üëë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π",
            color=DEFAULT_COLOR,
            description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ!"
        )
        embed.add_field(
            name="üå∏ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
            value="- –ê–∫–∫–∞—É–Ω—Ç —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è\n- –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π",
            inline=False
        )
        embed.set_footer(text=f"–°–µ—Ä–≤–µ—Ä {interaction.guild.name}")

        view = RegistrationButtonView()
        message = await channel.send(embed=embed, view=view)
        bot.registration_message_id = message.id

        await interaction.response.send_message(
            f"üå∏ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ {channel.mention}!",
            ephemeral=True
        )
        await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_registration: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
            ephemeral=True
        )


@bot.tree.command(name="add_country", description="–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def add_country(interaction: discord.Interaction, name: str, role: discord.Role, emoji: str = "üèõÔ∏è"):
    try:
        if not name or len(name) > 32:
            await interaction.response.send_message(
                f"üí¢ {random.choice(bot.responses['errors'])} –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤!",
                ephemeral=True
            )
            return

        countries = await load_data("countries.json")
        if name in countries:
            await interaction.response.send_message(
                f"üí¢ {random.choice(bot.responses['errors'])} –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                ephemeral=True
            )
            return

        countries[name] = {
            "role_id": role.id,
            "emoji": emoji,
            "created_at": str(datetime.now()),
            "created_by": interaction.user.id
        }
        await save_data("countries.json", countries)

        embed = discord.Embed(
            title=f"‚ú® {random.choice(bot.responses['success'])} –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ!",
            color=DEFAULT_COLOR,
            description=f"**{name}** {emoji}"
        )
        embed.add_field(name="üå∏ –†–æ–ª—å", value=role.mention)
        embed.add_field(name="‚ú® –°–æ–∑–¥–∞—Ç–µ–ª—å", value=interaction.user.mention)
        embed.set_footer(text=f"–í—Å–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤: {len(countries)}")

        await interaction.response.send_message(embed=embed)
        await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞!",
            ephemeral=True
        )


@bot.tree.command(name="delete_country", description="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_country(interaction: discord.Interaction, country_name: str):
    try:
        countries = await load_data("countries.json")
        if country_name not in countries:
            await interaction.response.send_message(
                f"üíî –°—Ç—Ä–∞–Ω–∞ '{country_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                ephemeral=True
            )
            return

        players = await load_data("players.json")
        players_with_country = [
            p for p in players.values()
            if p.get("country") == country_name
        ]

        if players_with_country:
            await interaction.response.send_message(
                f"üí¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É! {len(players_with_country)} –∏–≥—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ—ë.",
                ephemeral=True
            )
            return

        del countries[country_name]
        await save_data("countries.json", countries)

        await interaction.response.send_message(
            f"üå∏ –°—Ç—Ä–∞–Ω–∞ '{country_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            ephemeral=True
        )
        await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã!",
            ephemeral=True
        )


@bot.tree.command(name="delete_all_countries", description="–£–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç—Ä–∞–Ω—ã (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_all_countries(interaction: discord.Interaction):
    try:
        players = await load_data("players.json")
        if any(p.get("country") for p in players.values()):
            await interaction.response.send_message(
                "üí¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –ø–æ–∫–∞ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞–º–∏!",
                ephemeral=True
            )
            return

        view = ConfirmView()
        await interaction.response.send_message(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç—Ä–∞–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            view=view,
            ephemeral=True
        )
        await view.wait()

        if view.confirmed:
            await save_data("countries.json", {})
            await interaction.followup.send(
                "üå∏ –í—Å–µ —Å—Ç—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
                ephemeral=True
            )
            await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω!",
            ephemeral=True
        )


@bot.tree.command(name="list_countries", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def list_countries(interaction: discord.Interaction):
    try:
        countries = await load_data("countries.json")
        if not countries:
            await interaction.response.send_message(
                "üíî –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–∞–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /add_country",
                ephemeral=True
            )
            return

        embed = discord.Embed(
            title="üåç –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω",
            color=DEFAULT_COLOR,
            description=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: {len(countries)}"
        )

        for country, data in countries.items():
            role = interaction.guild.get_role(data["role_id"])
            embed.add_field(
                name=f"{data.get('emoji', 'üèõÔ∏è')} {country}",
                value=f"–†–æ–ª—å: {role.mention if role else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}",
                inline=False
            )

        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω!",
            ephemeral=True
        )


@bot.tree.command(name="add_principle", description="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def add_principle(interaction: discord.Interaction, principle_id: str, name: str, cost: int):
    try:
        if cost < 1 or cost > 5:
            await interaction.response.send_message(
                f"üí¢ {random.choice(bot.responses['errors'])} –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –æ—á–∫–æ–≤!",
                ephemeral=True
            )
            return

        principles = await load_data("national_principles.json")
        if principle_id in principles:
            await interaction.response.send_message(
                f"üí¢ {random.choice(bot.responses['errors'])} –ü—Ä–∏–Ω—Ü–∏–ø —Å ID '{principle_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                ephemeral=True
            )
            return

        principles[principle_id] = {
            "name": name,
            "cost": cost,
            "created_at": str(datetime.now())
        }
        await save_data("national_principles.json", principles)

        await interaction.response.send_message(
            f"üå∏ –ü—Ä–∏–Ω—Ü–∏–ø '{name}' ({cost} –æ—á–∫–æ–≤) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            ephemeral=True
        )
        await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞!",
            ephemeral=True
        )


@bot.tree.command(name="delete_principle", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_principle(interaction: discord.Interaction, principle_id: str):
    try:
        principles = await load_data("national_principles.json")
        if principle_id not in principles:
            await interaction.response.send_message(
                f"üíî –ü—Ä–∏–Ω—Ü–∏–ø '{principle_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                ephemeral=True
            )
            return

        players = await load_data("players.json")
        players_with_principle = [
            p for p in players.values()
            if principle_id in p.get("principles", [])
        ]

        if players_with_principle:
            await interaction.response.send_message(
                f"üí¢ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø! {len(players_with_principle)} –∏–≥—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–≥–æ.",
                ephemeral=True
            )
            return

        del principles[principle_id]
        await save_data("national_principles.json", principles)

        await interaction.response.send_message(
            f"üå∏ –ü—Ä–∏–Ω—Ü–∏–ø '{principle_id}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
            ephemeral=True
        )
        await bot.maybe_send_dmc(interaction.channel)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞!",
            ephemeral=True
        )


@bot.tree.command(name="list_principles", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def list_principles(interaction: discord.Interaction):
    try:
        principles = await load_data("national_principles.json")
        if not principles:
            await interaction.response.send_message(
                "üíî –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
                ephemeral=True
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ –∏–º–µ–Ω–∏
        sorted_principles = sorted(
            principles.items(),
            key=lambda x: x[1]["name"]
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        principles_list = []
        for pid, data in sorted_principles:
            principles_list.append(
                f"**{data['name']}** (`{pid}`) - {data['cost']} –æ—á–∫–æ–≤\n"
                f"{data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}"
            )

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 10 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        chunks = [principles_list[i:i + 10] for i in range(0, len(principles_list), 10)]

        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Embed
        embed = discord.Embed(
            title="üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            color=DEFAULT_COLOR,
            description=f"–í—Å–µ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤: {len(principles)}"
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
        for chunk in chunks:
            message = "\n\n".join(chunk)
            await interaction.followup.send(message, ephemeral=True)

    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤!",
            ephemeral=True
        )


@bot.tree.command(name="add_economy_type", description="–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def add_economy_type(interaction: discord.Interaction, type_id: str, name: str, description: str = ""):
    try:
        if type_id in bot.economy_types:
            await interaction.response.send_message(
                f"üí¢ –¢–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏ '{type_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                ephemeral=True
            )
            return

        bot.economy_types[type_id] = {
            "name": name,
            "description": description
        }
        await interaction.response.send_message(
            f"üå∏ –¢–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            ephemeral=True
        )
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏: {str(e)}")
        await interaction.response.send_message(
            "üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏!",
            ephemeral=True
        )


@bot.tree.command(name="delete_economy_type", description="–£–¥–∞–ª–∏—Ç—å —Ç–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_economy_type(interaction: discord.Interaction, type_id: str):
    try:
        if type_id not in bot.economy_types:
            await interaction.response.send_message(
                f"üí¢ –¢–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏ '{type_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                ephemeral=True
            )
            return

        players = await load_data("players.json")
        used_by = [p for p in players.values() if p.get("economy") == type_id]

        if used_by:
            await interaction.response.send_message(
                f"üí¢ –¢–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(used_by)} –∏–≥—Ä–æ–∫–∞–º–∏!",
                ephemeral=True
            )
            return

        del bot.economy_types[type_id]
        await interaction.response.send_message(
            f"üå∏ –¢–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏ '{type_id}' —É–¥–∞–ª—ë–Ω!",
            ephemeral=True
        )
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏: {str(e)}")
        await interaction.response.send_message(
            "üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏!",
            ephemeral=True
        )


@bot.tree.command(name="list_economy_types", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏–∫ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def list_economy_types(interaction: discord.Interaction):
    try:
        if not bot.economy_types:
            await interaction.response.send_message(
                "üíî –¢–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
                ephemeral=True
            )
            return

        embed = discord.Embed(
            title="üíº –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏",
            color=DEFAULT_COLOR,
            description=f"–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: {len(bot.economy_types)}"
        )

        for type_id, data in bot.economy_types.items():
            embed.add_field(
                name=f"{type_id}",
                value=f"{data['name']}\n{data['description']}",
                inline=False
            )

        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏: {str(e)}")
        await interaction.response.send_message(
            "üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏!",
            ephemeral=True
        )


@bot.tree.command(name="delete_player", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_player(interaction: discord.Interaction, member: discord.Member):
    try:
        players = await load_data("players.json")
        if str(member.id) not in players:
            await interaction.response.send_message(
                f"üíî {random.choice(bot.responses['errors'])} –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
                ephemeral=True
            )
            return

        embed = discord.Embed(
            title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            color=0xFF5555,
            description=f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {member.mention}?"
        )
        embed.add_field(
            name="üå∏ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø–µ—Ä–µ–¥—É–º–∞—Ç—å!",
            value="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            inline=False
        )
        embed.set_footer(text=f"–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {interaction.user.display_name}")

        view = ui.View()
        confirm_btn = ui.Button(label="–î–∞, —É–¥–∞–ª–∏—Ç—å", style=ButtonStyle.red, emoji="üíî")
        cancel_btn = ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=ButtonStyle.green, emoji="üå∏")

        async def confirm_callback(interaction: discord.Interaction):
            config = await load_data("bot_config.json")
            guild_config = config.get(str(interaction.guild.id), {})

            if guild_config:
                default_role = interaction.guild.get_role(guild_config["default_role"])
                if default_role and default_role in member.roles:
                    await member.remove_roles(default_role)

                player_data = players[str(member.id)]
                if "country" in player_data:
                    countries = await load_data("countries.json")
                    country_data = countries.get(player_data["country"], {})
                    if "role_id" in country_data:
                        country_role = interaction.guild.get_role(country_data["role_id"])
                        if country_role and country_role in member.roles:
                            await member.remove_roles(country_role)

            original_nick = player_data.get("original_nick")
            if original_nick:
                try:
                    await member.edit(nick=original_nick)
                except:
                    pass

            del players[str(member.id)]
            await save_data("players.json", players)

            success_embed = discord.Embed(
                title="üíî –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω",
                color=0xFF5555,
                description=f"–ü—Ä–æ—Ñ–∏–ª—å {member.mention} –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
            )
            success_embed.add_field(
                name="üå∏ –ë—ã–≤—à–∏–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                value=f"{member.display_name} –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º",
                inline=False
            )
            success_embed.set_footer(text=f"–£–¥–∞–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}")

            await interaction.response.edit_message(
                embed=success_embed,
                view=None
            )
            await bot.send_emotional_response(interaction.channel, "farewell")
            await bot.maybe_send_dmc(interaction.channel)

        async def cancel_callback(interaction: discord.Interaction):
            await interaction.response.edit_message(
                content=f"üå∏ {random.choice(bot.responses['success'])} –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
                embed=None,
                view=None
            )

        confirm_btn.callback = confirm_callback
        cancel_btn.callback = cancel_callback

        view.add_item(confirm_btn)
        view.add_item(cancel_btn)

        await interaction.response.send_message(embed=embed, view=view)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!",
            ephemeral=True
        )


@bot.tree.command(name="delete_all_players", description="–£–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ—Ñ–∏–ª–∏ (–∞–¥–º–∏–Ω)")
@commands.has_permissions(administrator=True)
async def delete_all_players(interaction: discord.Interaction):
    try:
        embed = discord.Embed(
            title="üí• –û–ü–ê–°–ù–û–ï –î–ï–ô–°–¢–í–ò–ï",
            color=0xFF0000,
            description="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤?"
        )
        embed.add_field(
            name="üå∏ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:",
            value="- –£–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤\n- –°–±—Ä–æ—Å–∏—Ç –∏—Ö —Ä–æ–ª–∏ –∏ –Ω–∏–∫–∏\n- –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å!",
            inline=False
        )
        embed.set_footer(text="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        view = ui.View()
        confirm_btn = ui.Button(label="–î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–Å", style=ButtonStyle.red, emoji="üí£")
        cancel_btn = ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=ButtonStyle.green, emoji="üå∏")

        async def confirm_callback(interaction: discord.Interaction):
            await save_data("players.json", {})
            bot.active_registrations.clear()

            config = await load_data("bot_config.json")
            guild_config = config.get(str(interaction.guild.id), {})

            if guild_config:
                default_role = interaction.guild.get_role(guild_config["default_role"])
                if default_role:
                    for member in interaction.guild.members:
                        if default_role in member.roles:
                            await member.remove_roles(default_role)
                        players = await load_data("players.json")
                        if str(member.id) in players:
                            original_nick = players[str(member.id)].get("original_nick")
                            if original_nick:
                                try:
                                    await member.edit(nick=original_nick)
                                except:
                                    pass

            success_embed = discord.Embed(
                title="üí• –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã!",
                color=0xFF5555,
                description="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞"
            )
            success_embed.set_footer(text=f"–£–¥–∞–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}")

            await interaction.response.edit_message(
                embed=success_embed,
                view=None
            )
            await bot.send_emotional_response(interaction.channel, "farewell")
            await bot.maybe_send_dmc(interaction.channel)

        async def cancel_callback(interaction: discord.Interaction):
            await interaction.response.edit_message(
                content=f"üå∏ {random.choice(bot.responses['success'])} –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
                embed=None,
                view=None
            )

        confirm_btn.callback = confirm_callback
        cancel_btn.callback = cancel_callback

        view.add_item(confirm_btn)
        view.add_item(cancel_btn)

        await interaction.response.send_message(embed=embed, view=view)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await interaction.response.send_message(
            f"üí¢ {random.choice(bot.responses['errors'])} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π!",
            ephemeral=True
        )


@bot.tree.command(name="profile", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞")
async def profile(interaction: discord.Interaction, member: discord.Member = None):
    try:
        target_member = member or interaction.user
        players = await load_data("players.json")
        player_data = players.get(str(target_member.id))

        if not player_data:
            await interaction.response.send_message(
                f"üíî {random.choice(['–û–π, –Ω–µ–ª–æ–≤–∫–æ...', '–ö–∞–∫–æ–π –∫–æ–Ω—Ñ—É–∑!', '–ù—É –∏ –Ω—É!'])} –≠—Ç–æ—Ç –ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–∞–∂–µ –Ω–µ —É–¥–æ—Å—É–∂–∏–ª—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
                ephemeral=False
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        principles = await load_data("national_principles.json")
        principles_info = []
        for pid in player_data.get("principles", []):
            if pid in principles:
                p = principles[pid]
                principles_info.append(f"‚ú® {p['name']} ({p['cost']} –æ—á–∫–æ–≤)")

        economy_info = bot.economy_types.get(player_data.get("economy", ""))

        # –°–æ–∑–¥–∞–µ–º embed —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        embed = discord.Embed(
            title=f"üëë –ü—Ä–æ—Ñ–∏–ª—å {target_member.display_name}",
            color=0xFF69B4,  # –†–æ–∑–æ–≤—ã–π —Ü–≤–µ—Ç
            description=f"*{random.choice(['–í–æ—Ç —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä—á–∏–∫!', '–ù–µ–¥—É—Ä—Å—Ç–≤–µ–Ω–Ω–æ...', '–û-–æ-–æ, –∫—Ç–æ —ç—Ç–æ —É –Ω–∞—Å?'])}*"
        )
        embed.add_field(
            name="üè∞ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ",
            value=player_data.get("country", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"),
            inline=False
        )

        if principles_info:
            embed.add_field(
                name="üìú –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                value="\n".join(principles_info),
                inline=False
            )

        if economy_info:
            embed.add_field(
                name="üíº –¢–∏–ø —ç–∫–æ–Ω–æ–º–∏–∫–∏",
                value=f"{economy_info.get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n{economy_info.get('description', '')}",
                inline=False
            )

        if "registered_at" in player_data:
            embed.set_footer(text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {player_data['registered_at']}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
        await interaction.response.send_message(embed=embed)

        # –î–µ—Ä–∑–∫–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
        flirt_compliment = random.choice([
            f"{target_member.mention} –¢—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–≥–ª—è–¥–∏—à—å... –æ–ø–∞—Å–Ω–æ. –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è. üòè",
            f"*–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç {target_member.mention}* –ù–µ–ø–ª–æ—Ö–æ... –°–æ–≤—Å–µ–º –Ω–µ–ø–ª–æ—Ö–æ. üíã",
            f"–û—Ö, {target_member.mention}... –¢—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—à—å? –ü–æ—á—Ç–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ. üòº",
            f"{target_member.mention} *–∑–∞–¥—É–º—á–∏–≤–æ* –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ê —á—Ç–æ –±—ã —Å–∫–∞–∑–∞–ª –•–ª–µ–± –ø—Ä–æ —Ç–∞–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—å? üëÄ",
            f"–ù—É —á—Ç–æ, {target_member.mention}... –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–ª–∏ —Ç—ã —É–∂–µ —Å–º—É—Ç–∏–ª—Å—è? üíÖ"
        ])
        await interaction.followup.send(flirt_compliment)

    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ profile: {str(e)}")
        await interaction.response.send_message(
            "üí¢ –ß—ë—Ä—Ç! –•–ª–µ–± —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –º–Ω–æ–π –Ω–µ–¥–æ–≤–æ–ª–µ–Ω... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, —Å–æ–ª–Ω—ã—à–∫–æ.",
            ephemeral=False
        )

# –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ò–ì–†–û–ö–û–í - –°–ü–ò–°–û–ö –°–¢–†–ê–ù
@bot.tree.command(name="countries", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã")
async def countries(interaction: discord.Interaction):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        countries_data = await load_data("countries.json")
        players_data = await load_data("players.json")

        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å—Ç—Ä–∞–Ω—ã
        occupied = [
            p["country"]
            for p in players_data.values()
            if isinstance(p, dict) and "country" in p
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–∞–Ω
        if not countries_data:
            await interaction.response.send_message("üåç –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç!", ephemeral=True)
            return

        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥
        embed = discord.Embed(
            title="üå∏ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã",
            color=DEFAULT_COLOR,
            description="*–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*"
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        for country_name, country_info in countries_data.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_emoji = "üü¢ –°–≤–æ–±–æ–¥–Ω–∞" if country_name not in occupied else "üî¥ –ó–∞–Ω—è—Ç–∞"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ
            embed.add_field(
                name=f"{country_info.get('emoji', 'üèõÔ∏è')} {country_name}",
                value=status_emoji,
                inline=True
            )

            # –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if len(embed.fields) % 25 == 0:
                await interaction.channel.send(embed=embed)
                embed = discord.Embed(color=DEFAULT_COLOR)

        await interaction.response.send_message(embed=embed)

    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ /countries: {str(e)}")
        await interaction.response.send_message(
            "üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö!",
            ephemeral=True
        )

# –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ò–ì–†–û–ö–û–í - –°–ü–ò–°–û–ö –ü–†–ò–ù–¶–ò–ü–û–í
@bot.tree.command(name="principles", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∞–≤–ª–µ–Ω–∏—è")
async def principles(interaction: discord.Interaction):
    try:
        principles = await load_data("national_principles.json")
        if not principles:
            await interaction.response.send_message("üìú –ü—Ä–∏–Ω—Ü–∏–ø—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", ephemeral=True)
            return

        embed = discord.Embed(
            title="üå∏ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã",
            color=DEFAULT_COLOR,
            description="–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞:"
        )

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤—ã–≤–æ–¥
        sorted_principles = sorted(principles.items(), key=lambda x: x[1]['name'])
        for pid, data in sorted_principles:
            embed.add_field(
                name=f"{data['name']} ({data['cost']} –æ—á–∫–æ–≤)",
                value=f"ID: {pid}",
                inline=False
            )
            if len(embed.fields) % 15 == 0:  # 15 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                await interaction.channel.send(embed=embed)
                embed = discord.Embed(color=DEFAULT_COLOR)

        await interaction.response.send_message(embed=embed)
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ principles: {str(e)}")


# ========== –°–û–ë–´–¢–ò–Ø ==========
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    content = message.content.lower()
    is_ping = bot.user.mentioned_in(message)
    user_id = message.author.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if await bot.is_spam(user_id):
        if random.random() < 0.6:  # 60% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ø–∞–º
            await message.channel.send(random.choice(bot.responses["spam_responses"]))
        return

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–∏–Ω–≥–µ, —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É handle_swear)
    if is_ping:
        if await bot.handle_swear(message):  # –ï—Å–ª–∏ –±—ã–ª –º–∞—Ç –≤ –ø–∏–Ω–≥–µ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            return

    # 2. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –ø–∏–Ω–≥–∏
    if is_ping and content.replace(f'<@{bot.user.id}>', '').strip() == '':
        return

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ "—Å–ø–∞—Å–∏–±–æ" (—Å –ø–∏–Ω–≥–æ–º –∏–ª–∏ –±–µ–∑)
    thanks_words = ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks", "thx"]
    if any(word in content for word in thanks_words):
        await bot.send_emotional_response(message.channel, "thanks_responses", message.author.mention if is_ping else None)
        return

    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    triggers = {
        "riki": ["—Ä–∏–∫–∏ —Ç—É–ø–æ–π", "—Ä–∏–∫–∏ –µ–±–ª–∞–Ω", "—Ä–∏–∫–∏ –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç"],
        "hleb": ["—Ö–ª–µ–±", "hleb", "—Ö–ª–µ–±–æ—Ä–∏—Å"],
        "farewell": ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–∞–≤–∞–π", "bye"],
        "compl": ["–≤–æ–ª—á–∏—Ü–∞", "—É–º–Ω–∞—è", "–º–∏–ª–∞—è", "–∫–ª–∞—Å—Å–Ω–∞—è", "–∫—Ä–∞—Å–æ—Ç–∫–∞", "—Ç–∏–≥—Ä–∏—Ü–∞", "–∞—Ö—É–µ–Ω–Ω–∞—è"],
        "morning": ["–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—É—Ç—Ä–æ", "—É—Ç—Ä–∞"],
        "evening": ["–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"],
        "night": ["–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–∞—Ç—å", "–Ω–æ—á–∏"]
    }

    for response_type, words in triggers.items():
        if any(word in content for word in words):
            await bot.send_emotional_response(message.channel, response_type, message.author.mention if is_ping else None)
            return

    # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤ (–±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
    if is_ping:
        await bot.send_emotional_response(message.channel, "greetings", message.author.mention)
        return

    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    allowed_channels = []
    if bot.offtopic_channel:
        allowed_channels.append(bot.offtopic_channel.id)

    if message.channel.id not in allowed_channels and not isinstance(message.channel, discord.Thread):
        return

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await bot.maybe_send_joke(message.channel, message.author.mention)
    await bot.maybe_send_flirt(message.channel)
    await bot.maybe_send_dmc(message.channel)
    await bot.send_time_based_greeting(message.channel)
    await bot.process_commands(message)

@bot.event
async def on_ready():
    try:
        synced = await bot.tree.sync()
        logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")

        config = await load_data("bot_config.json")
        for guild in bot.guilds:
            guild_config = config.get(str(guild.id), {})
            if guild_config and "offtopic_channel" in guild_config:
                bot.offtopic_channel = guild.get_channel(guild_config["offtopic_channel"])

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")

    activity = discord.Activity(
        type=discord.ActivityType.watching,
        name=f"–∑–∞ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º–∏ | –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {bot.mood}"
    )
    await bot.change_presence(activity=activity)
    logging.info(f"–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {bot.mood}")




@bot.event
async def on_ready():
    try:
        synced = await bot.tree.sync()
        logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")

        config = await load_data("bot_config.json")
        for guild in bot.guilds:
            guild_config = config.get(str(guild.id), {})
            if guild_config and "offtopic_channel" in guild_config:
                bot.offtopic_channel = guild.get_channel(guild_config["offtopic_channel"])


    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")

    activity = discord.Activity(
        type=discord.ActivityType.watching,
        name=f"–∑–∞ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º–∏ | –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {bot.mood}"
    )
    await bot.change_presence(activity=activity)
    logging.info(f"–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {bot.mood}")



# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
if __name__ == "__main__":
    if not os.path.exists(BACKUPS_DIR):
        os.makedirs(BACKUPS_DIR)

    for file in DATA_FILES + [ERROR_LOGS_FILE]:
        if not os.path.exists(file):
            with open(file, "w") as f:
                if file.endswith(".json"):
                    json.dump({}, f)

    if not os.path.exists("config.json"):
        with open("config.json", "w") as f:
            json.dump({"token": "YOUR_BOT_TOKEN"}, f, indent=4)
        print("–°–æ–∑–¥–∞–Ω config.json. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω!")
        exit()

    with open("config.json") as f:
        config = json.load(f)

    if "token" not in config:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json!")
        exit()

    bot.run(config["token"])

